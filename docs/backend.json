{
  "entities": {
    "User": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "User",
      "type": "object",
      "description": "Represents a user of the IntLearn platform.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the user."
        },
        "email": {
          "type": "string",
          "description": "User's email address.",
          "format": "email"
        },
        "displayName": {
          "type": "string",
          "description": "User's display name."
        },
        "role": {
          "type": "string",
          "description": "Role of the user (e.g., 'admin', 'student')."
        }
      },
      "required": [
        "id",
        "email",
        "displayName",
        "role"
      ]
    },
    "Course": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Course",
      "type": "object",
      "description": "Represents a course on the IntLearn platform.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the course."
        },
        "name": {
          "type": "string",
          "description": "Name of the course."
        },
        "description": {
          "type": "string",
          "description": "Description of the course."
        },
        "adminId": {
          "type": "string",
          "description": "Reference to the Admin who created the course. (Relationship: Admin 1:N Course)"
        }
      },
      "required": [
        "id",
        "name",
        "description",
        "adminId"
      ]
    },
    "Topic": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Topic",
      "type": "object",
      "description": "Represents a topic within a course.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the topic."
        },
        "courseId": {
          "type": "string",
          "description": "Reference to the Course this topic belongs to. (Relationship: Course 1:N Topic)"
        },
        "name": {
          "type": "string",
          "description": "Name of the topic."
        },
        "description": {
          "type": "string",
          "description": "Description of the topic."
        }
      },
      "required": [
        "id",
        "courseId",
        "name",
        "description"
      ]
    },
    "Flashcard": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Flashcard",
      "type": "object",
      "description": "Represents a flashcard for a specific topic.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the flashcard."
        },
        "topicId": {
          "type": "string",
          "description": "Reference to the Topic this flashcard belongs to. (Relationship: Topic 1:N Flashcard)"
        },
        "front": {
          "type": "string",
          "description": "The front side of the flashcard (question or concept)."
        },
        "back": {
          "type": "string",
          "description": "The back side of the flashcard (answer or explanation)."
        }
      },
      "required": [
        "id",
        "topicId",
        "front",
        "back"
      ]
    },
    "Question": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Question",
      "type": "object",
      "description": "Represents a question in a quiz.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the question."
        },
        "topicId": {
          "type": "string",
          "description": "Reference to the Topic this question belongs to. (Relationship: Topic 1:N Question)"
        },
        "type": {
          "type": "string",
          "description": "Type of question (e.g., 'MCQ', 'True/False', 'Short Answer')."
        },
        "text": {
          "type": "string",
          "description": "The question text."
        },
        "correctAnswer": {
          "type": "string",
          "description": "The correct answer to the question. Could be text or id of options."
        },
        "options": {
          "type": "array",
          "description": "Possible answers for MCQ",
          "items": {
            "type": "string"
          }
        }
      },
      "required": [
        "id",
        "topicId",
        "type",
        "text",
        "correctAnswer"
      ]
    },
    "Quiz": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Quiz",
      "type": "object",
      "description": "Represents a quiz for a specific topic.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the quiz."
        },
        "topicId": {
          "type": "string",
          "description": "Reference to the Topic this quiz belongs to. (Relationship: Topic 1:N Quiz)"
        },
        "name": {
          "type": "string",
          "description": "Name of the quiz."
        },
        "description": {
          "type": "string",
          "description": "Description of the quiz."
        },
        "questionIds": {
          "type": "array",
          "description": "References to Questions in this quiz. (Relationship: Quiz N:N Question)",
          "items": {
            "type": "string"
          }
        }
      },
      "required": [
        "id",
        "topicId",
        "name",
        "description",
        "questionIds"
      ]
    },
    "Enrollment": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Enrollment",
      "type": "object",
      "description": "Represents a student's enrollment in a course.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the enrollment."
        },
        "userId": {
          "type": "string",
          "description": "Reference to the User (Student) enrolled in the course. (Relationship: User 1:N Enrollment)"
        },
        "courseId": {
          "type": "string",
          "description": "Reference to the Course the student is enrolled in. (Relationship: Course 1:N Enrollment)"
        },
        "enrollmentDate": {
          "type": "string",
          "description": "The date the student enrolled.",
          "format": "date-time"
        }
      },
      "required": [
        "id",
        "userId",
        "courseId",
        "enrollmentDate"
      ]
    },
    "QuizAttempt": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "QuizAttempt",
      "type": "object",
      "description": "Represents a student's attempt at a quiz.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the quiz attempt."
        },
        "userId": {
          "type": "string",
          "description": "Reference to the User (Student) who took the quiz. (Relationship: User 1:N QuizAttempt)"
        },
        "quizId": {
          "type": "string",
          "description": "Reference to the Quiz that was attempted. (Relationship: Quiz 1:N QuizAttempt)"
        },
        "score": {
          "type": "number",
          "description": "The score achieved on the quiz."
        },
        "attemptedDate": {
          "type": "string",
          "description": "The date and time the quiz was attempted.",
          "format": "date-time"
        }
      },
      "required": [
        "id",
        "userId",
        "quizId",
        "score",
        "attemptedDate"
      ]
    },
    "Performance": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Performance",
      "type": "object",
      "description": "Represents performance data for a student in a specific topic.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the performance record."
        },
        "userId": {
          "type": "string",
          "description": "Reference to the User (Student) the performance data belongs to. (Relationship: User 1:N Performance)"
        },
        "topicId": {
          "type": "string",
          "description": "Reference to the Topic the performance data is related to. (Relationship: Topic 1:N Performance)"
        },
        "accuracy": {
          "type": "number",
          "description": "Accuracy percentage for the topic."
        },
        "timeSpent": {
          "type": "number",
          "description": "Time spent studying the topic (in seconds)."
        },
        "flashcardsMastered": {
          "type": "number",
          "description": "Number of flashcards mastered in the topic."
        }
      },
      "required": [
        "id",
        "userId",
        "topicId",
        "accuracy",
        "timeSpent",
        "flashcardsMastered"
      ]
    },
    "Badge": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Badge",
      "type": "object",
      "description": "Represents a badge that a student can earn.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the badge."
        },
        "name": {
          "type": "string",
          "description": "Name of the badge (e.g., 'Flashcard Master')."
        },
        "description": {
          "type": "string",
          "description": "Description of the badge."
        },
        "imageUrl": {
          "type": "string",
          "description": "URL of the badge image.",
          "format": "uri"
        }
      },
      "required": [
        "id",
        "name",
        "description",
        "imageUrl"
      ]
    },
    "UserBadge": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "UserBadge",
      "type": "object",
      "description": "Represents a badge earned by a user.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the user badge."
        },
        "userId": {
          "type": "string",
          "description": "Reference to the User who earned the badge. (Relationship: User 1:N UserBadge)"
        },
        "badgeId": {
          "type": "string",
          "description": "Reference to the Badge earned. (Relationship: Badge 1:N UserBadge)"
        },
        "earnedDate": {
          "type": "string",
          "description": "The date the badge was earned.",
          "format": "date-time"
        }
      },
      "required": [
        "id",
        "userId",
        "badgeId",
        "earnedDate"
      ]
    }
  },
  "auth": {
    "providers": [
      "password",
      "anonymous",
      "google.com"
    ]
  },
  "firestore": {
    "structure": [
      {
        "path": "/users/{userId}",
        "definition": {
          "entityName": "User",
          "schema": {
            "$ref": "#/backend/entities/User"
          },
          "description": "Stores user profile information.  Access is restricted to the user and potentially admins via rules.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier for the user."
            }
          ]
        }
      },
      {
        "path": "/courses/{courseId}",
        "definition": {
          "entityName": "Course",
          "schema": {
            "$ref": "#/backend/entities/Course"
          },
          "description": "Stores course information.  Owned by the adminId.  The adminId will be copied to subcollections.",
          "params": [
            {
              "name": "courseId",
              "description": "The unique identifier for the course."
            }
          ]
        }
      },
      {
        "path": "/courses/{courseId}/topics/{topicId}",
        "definition": {
          "entityName": "Topic",
          "schema": {
            "$ref": "#/backend/entities/Topic"
          },
          "description": "Stores topics for a specific course. Includes denormalized 'adminId' from the parent course for authorization independence.",
          "params": [
            {
              "name": "courseId",
              "description": "The unique identifier for the course."
            },
            {
              "name": "topicId",
              "description": "The unique identifier for the topic."
            }
          ]
        }
      },
      {
        "path": "/courses/{courseId}/topics/{topicId}/flashcards/{flashcardId}",
        "definition": {
          "entityName": "Flashcard",
          "schema": {
            "$ref": "#/backend/entities/Flashcard"
          },
          "description": "Stores flashcards for a specific topic. Includes denormalized 'adminId' from the parent course for authorization independence.",
          "params": [
            {
              "name": "courseId",
              "description": "The unique identifier for the course."
            },
            {
              "name": "topicId",
              "description": "The unique identifier for the topic."
            },
            {
              "name": "flashcardId",
              "description": "The unique identifier for the flashcard."
            }
          ]
        }
      },
      {
        "path": "/courses/{courseId}/topics/{topicId}/questions/{questionId}",
        "definition": {
          "entityName": "Question",
          "schema": {
            "$ref": "#/backend/entities/Question"
          },
          "description": "Stores questions for a specific topic. Includes denormalized 'adminId' from the parent course for authorization independence.",
          "params": [
            {
              "name": "courseId",
              "description": "The unique identifier for the course."
            },
            {
              "name": "topicId",
              "description": "The unique identifier for the topic."
            },
            {
              "name": "questionId",
              "description": "The unique identifier for the question."
            }
          ]
        }
      },
      {
        "path": "/courses/{courseId}/topics/{topicId}/quizzes/{quizId}",
        "definition": {
          "entityName": "Quiz",
          "schema": {
            "$ref": "#/backend/entities/Quiz"
          },
          "description": "Stores quizzes for a specific topic. Includes denormalized 'adminId' from the parent course for authorization independence.",
          "params": [
            {
              "name": "courseId",
              "description": "The unique identifier for the course."
            },
            {
              "name": "topicId",
              "description": "The unique identifier for the topic."
            },
            {
              "name": "quizId",
              "description": "The unique identifier for the quiz."
            }
          ]
        }
      },
      {
        "path": "/users/{userId}/enrollments/{enrollmentId}",
        "definition": {
          "entityName": "Enrollment",
          "schema": {
            "$ref": "#/backend/entities/Enrollment"
          },
          "description": "Stores enrollment information for a user.  Path-based ownership ensures only the user can access their enrollments.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier for the user."
            },
            {
              "name": "enrollmentId",
              "description": "The unique identifier for the enrollment."
            }
          ]
        }
      },
      {
        "path": "/users/{userId}/quizAttempts/{quizAttemptId}",
        "definition": {
          "entityName": "QuizAttempt",
          "schema": {
            "$ref": "#/backend/entities/QuizAttempt"
          },
          "description": "Stores quiz attempts for a user. Path-based ownership ensures only the user can access their quiz attempts.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier for the user."
            },
            {
              "name": "quizAttemptId",
              "description": "The unique identifier for the quiz attempt."
            }
          ]
        }
      },
      {
        "path": "/users/{userId}/performances/{performanceId}",
        "definition": {
          "entityName": "Performance",
          "schema": {
            "$ref": "#/backend/entities/Performance"
          },
          "description": "Stores performance data for a user. Path-based ownership ensures only the user can access their performance data.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier for the user."
            },
            {
              "name": "performanceId",
              "description": "The unique identifier for the performance record."
            }
          ]
        }
      },
      {
        "path": "/users/{userId}/userBadges/{userBadgeId}",
        "definition": {
          "entityName": "UserBadge",
          "schema": {
            "$ref": "#/backend/entities/UserBadge"
          },
          "description": "Stores badges earned by a user. Path-based ownership ensures only the user can access their badges.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier for the user."
            },
            {
              "name": "userBadgeId",
              "description": "The unique identifier for the user badge."
            }
          ]
        }
      },
      {
        "path": "/badges/{badgeId}",
        "definition": {
          "entityName": "Badge",
          "schema": {
            "$ref": "#/backend/entities/Badge"
          },
          "description": "Stores information about available badges.",
          "params": [
            {
              "name": "badgeId",
              "description": "The unique identifier for the badge."
            }
          ]
        }
      }
    ],
    "reasoning": "The Firestore structure is designed to support the IntLearn application's core features, focusing on AI-driven content generation, personalized learning, and performance tracking. The structure prioritizes authorization independence by denormalizing authorization data (specifically, the `adminId` for courses) into subcollections when necessary.\n\n**Authorization Independence and QAPs:**\n\n*   **Courses and Subcollections:** The `courses/{courseId}` collection stores course information. The `adminId` field indicates the administrator who created the course. Subcollections like `topics`, `flashcards`, `questions`, and `quizzes` are nested under each course. To ensure authorization independence, each document within these subcollections will need to duplicate the `adminId` from the parent course. This allows rules to validate that the admin modifying content in these subcollections is indeed the owner, without needing a `get()` call.\n*   **User Data:** User-specific data, like `enrollments`, `quizAttempts`, `performances`, and `userBadges` are stored under `/users/{userId}`. This path-based ownership simplifies security rules, ensuring only the user or an admin can access this data.\n\n**Structural Segregation:**\n\n*   The structure segregates data with different access needs. For example, user profiles are stored in the `/users/{userId}` collection, ensuring that only the user and potentially admins have access to this information. Course content is stored separately, with access controlled based on the `adminId` and user roles.\n\n**Access Modeling:**\n\n*   **Path-Based Ownership:** User-related data (enrollments, quiz attempts, performance, badges) uses the `/users/{userId}` path, clearly establishing ownership. Courses are owned by admins, and this ownership is denormalized into the subcollections.\n\n**Data Clarity and Predictability:**\n\n*   The schema uses explicit naming conventions and avoids dynamic keys. Relationships between entities are clearly defined using foreign keys (e.g., `courseId`, `topicId`).\n\nThis structure is designed to be secure, scalable, and easily debuggable, adhering to the principles of authorization independence, structural segregation, and clear access modeling. The denormalization of `adminId` into course subcollections enables robust and efficient security rules without relying on costly `get()` operations."
  }
}