'use client';

import { Button } from '@/components/ui/button';
import {
  Card,
  CardContent,
  CardDescription,
  CardFooter,
  CardHeader,
  CardTitle,
} from '@/components/ui/card';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Textarea } from '@/components/ui/textarea';
import { UploadCloud, Loader2, File as FileIcon } from 'lucide-react';
import { useRouter } from 'next/navigation';
import { useState } from 'react';
import { useToast } from '@/hooks/use-toast';
import { generateFlashcardsAndQuestions } from '@/ai/flows/generate-flashcards-and-questions';
import { useAuth, useFirestore, useUser } from '@/firebase';
import {
  addDoc,
  collection,
  serverTimestamp,
  writeBatch,
  doc,
} from 'firebase/firestore';
import { getCurrentUser } from '@/lib/auth';

// Helper to read file as text or data URL
const readFileAsDataURL = (file: File): Promise<string> => {
  return new Promise((resolve, reject) => {
    const reader = new FileReader();
    reader.onload = () => resolve(reader.result as string);
    reader.onerror = reject;
    reader.readAsDataURL(file);
  });
};

export default function NewCoursePage() {
  const router = useRouter();
  const { toast } = useToast();
  const firestore = useFirestore();
  const { user: firebaseUser } = useUser();
  const [loading, setLoading] = useState(false);
  const [courseTitle, setCourseTitle] = useState('');
  const [textContent, setTextContent] = useState('');
  const [files, setFiles] = useState<File[] | null>(null);

  const handleSubmit = async (event: React.FormEvent<HTMLFormElement>) => {
    event.preventDefault();
    if (!courseTitle.trim()) {
      toast({
        variant: 'destructive',
        title: 'Course Title Required',
        description: 'Please provide a title for your course.',
      });
      return;
    }
    if (!textContent.trim() && (!files || files.length === 0)) {
      toast({
        variant: 'destructive',
        title: 'No Content Provided',
        description:
          'Please either paste text content or upload a file to generate content from.',
      });
      return;
    }

    setLoading(true);
    toast({
      title: 'AI Processing Started',
      description:
        'Your course materials are being analyzed. This may take a moment.',
    });

    try {
      if (!firebaseUser) {
        throw new Error('You must be logged in to create a course.');
      }
      
      const appUser = await getCurrentUser(firebaseUser);
      if (appUser.role !== 'admin') {
        throw new Error('You must be an administrator to create a course.');
      }

      const materials: { type: 'text' | 'image' | 'pdf', content: string }[] = [];

      if (textContent.trim()) {
        materials.push({ type: 'text', content: textContent });
      }

      if (files && files.length > 0) {
        for (const file of files) {
          const dataUrl = await readFileAsDataURL(file);
          let type: 'image' | 'pdf' | 'text' = 'text';
          if (file.type.startsWith('image/')) type = 'image';
          else if (file.type === 'application/pdf') type = 'pdf';
          materials.push({ type, content: dataUrl });
        }
      }

      // 1. Call the Genkit flow
      const result = await generateFlashcardsAndQuestions({
        materials,
      });

      // 2. Save the generated content to Firestore in a batch
      const batch = writeBatch(firestore);

      // Create Course
      const courseRef = doc(collection(firestore, 'courses'));
      batch.set(courseRef, {
        name: courseTitle,
        description: 'A new course generated by AI.',
        adminId: firebaseUser.uid,
        createdAt: serverTimestamp(),
        status: 'draft',
      });

      // Create a default Topic for the course
      const topicRef = doc(collection(firestore, `courses/${courseRef.id}/topics`));
      batch.set(topicRef, {
        name: 'General',
        description: 'General topic for the course',
        courseId: courseRef.id,
        adminId: firebaseUser.uid,
        createdAt: serverTimestamp(),
      });

      // Add Flashcards
      result.flashcards.forEach((flashcard) => {
        const flashcardRef = doc(collection(firestore,`courses/${courseRef.id}/topics/${topicRef.id}/flashcards`));
        batch.set(flashcardRef, {
          ...flashcard,
          topicId: topicRef.id,
          status: 'needs-review',
          adminId: firebaseUser.uid,
        });
      });

      // Add Questions
      result.questions.forEach((question) => {
        const questionRef = doc(collection(firestore, `courses/${courseRef.id}/topics/${topicRef.id}/questions`));
        batch.set(questionRef, {
          text: question.question,
          answer: question.answer,
          type: question.type,
          options: question.options ?? [],
          topicId: topicRef.id,
          status: 'needs-review',
          adminId: firebaseUser.uid,
        });
      });

      // Commit the batch
      await batch.commit();

      setLoading(false);
      toast({
        title: 'Content Generated!',
        description: 'Flashcards and questions are ready for your review.',
      });

      // 3. Redirect to the new course's review page
      router.push(`/dashboard/admin/courses/${courseRef.id}`);
    } catch (error: any) {
      console.error('Failed to generate content:', error);
      setLoading(false);
      toast({
        variant: 'destructive',
        title: 'Uh oh! Something went wrong.',
        description: error.message || 'Could not generate content.',
      });
    }
  };

  return (
    <div className="max-w-2xl mx-auto">
      <h1 className="text-3xl font-bold font-headline mb-6">
        Create a New Course
      </h1>
      <form onSubmit={handleSubmit}>
        <Card>
          <CardHeader>
            <CardTitle>Course Details</CardTitle>
            <CardDescription>
              Provide a title and upload your course materials.
            </CardDescription>
          </CardHeader>
          <CardContent className="space-y-6">
            <div className="space-y-2">
              <Label htmlFor="title">Course Title</Label>
              <Input
                id="title"
                placeholder="e.g., Introduction to Python"
                required
                value={courseTitle}
                onChange={(e) => setCourseTitle(e.target.value)}
              />
            </div>

            <div className="space-y-2">
              <Label htmlFor="materials">
                Upload Materials (PDF, Images, etc.)
              </Label>
              <div className="flex items-center justify-center w-full">
                <label
                  htmlFor="dropzone-file"
                  className="flex flex-col items-center justify-center w-full h-32 border-2 border-dashed rounded-lg cursor-pointer bg-secondary hover:bg-muted"
                >
                  <div className="flex flex-col items-center justify-center pt-5 pb-6">
                    <UploadCloud className="w-8 h-8 mb-4 text-muted-foreground" />
                    {files && files.length > 0 ? (
                      <div className="flex flex-wrap justify-center gap-2">
                        {Array.from(files).map(file => (
                          <div key={file.name} className="flex items-center gap-2 bg-background border rounded-md px-2 py-1 text-xs">
                            <FileIcon className="h-4 w-4" />
                            <span>{file.name}</span>
                          </div>
                        ))}
                      </div>
                    ) : (
                      <>
                        <p className="mb-2 text-sm text-muted-foreground">
                          <span className="font-semibold">Click to upload</span>{' '}
                          or drag and drop
                        </p>
                        <p className="text-xs text-muted-foreground">
                          PDF, PNG, JPG, TXT, etc.
                        </p>
                      </>
                    )}
                  </div>
                  <Input
                    id="dropzone-file"
                    type="file"
                    multiple
                    className="hidden"
                    onChange={(e) => setFiles(e.target.files ? Array.from(e.target.files) : null)}
                  />
                </label>
              </div>
            </div>

            <div className="space-y-2">
              <Label htmlFor="notes">Or Paste Text Content</Label>
              <Textarea
                id="notes"
                placeholder="Paste your lecture notes, articles, or any text-based content here..."
                className="min-h-[150px]"
                value={textContent}
                onChange={(e) => setTextContent(e.target.value)}
              />
            </div>
          </CardContent>
          <CardFooter>
            <Button type="submit" className="w-full" disabled={loading}>
              {loading && <Loader2 className="mr-2 h-4 w-4 animate-spin" />}
              {loading ? 'Generating Content...' : 'Generate with AI'}
            </Button>
          </CardFooter>
        </Card>
      </form>
    </div>
  );
}
