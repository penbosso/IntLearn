/**
 * @fileOverview Firestore Security Rules for the IntLearn platform.
 *
 * Core Philosophy:
 * This ruleset enforces a strict ownership model for user data and a creator-ownership model for course content.
 * Access to user-specific data (enrollments, quiz attempts, performance data, flashcard mastery, and user badges) is restricted to the user themselves.
 * Course content is primarily managed by the course creator (admin), with read access potentially open depending on the content type.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information. Only the user can read/write their own profile.
 * - /courses/{courseId}: Stores course information. The course creator (adminId) has write access.
 * - /courses/{courseId}/topics/{topicId}: Stores topics for a course. The course creator (adminId) has write access. The adminId is denormalized to this level.
 * - /courses/{courseId}/topics/{topicId}/flashcards/{flashcardId}: Stores flashcards for a topic. The course creator (adminId) has write access. The adminId is denormalized.
 * - /courses/{courseId}/topics/{topicId}/questions/{questionId}: Stores questions for a topic. The course creator (adminId) has write access. The adminId is denormalized.
 * - /courses/{courseId}/topics/{topicId}/quizzes/{quizId}: Stores quizzes for a topic. The course creator (adminId) has write access. The adminId is denormalized.
 * - /badges/{badgeId}: Stores information about available badges.
 * - /users/{userId}/enrollments/{enrollmentId}: Stores enrollment information. Only the user can read/write their own enrollments.
 * - /users/{userId}/quizAttempts/{quizAttemptId}: Stores quiz attempts. Only the user can read/write their own quiz attempts.
 * - /users/{userId}/performances/{performanceId}: Stores performance data. Only the user can read/write their own performance data.
 * - /users/{userId}/flashcardMastery/{flashcardId}: Stores flashcard mastery data. Only the user can read/write their own flashcard mastery data.
 * - /users/{userId}/userBadges/{userBadgeId}: Stores user badges. Only the user can read/write their own user badges.
 *
 * Key Security Decisions:
 * - User listing is explicitly denied at the root /users collection.
 * - All write operations require a verified user identity (request.auth != null).
 * - The ruleset focuses on authorization and relational integrity, omitting detailed schema validation for rapid prototyping.
 *
 * Denormalization for Authorization:
 * - The `adminId` of the parent course is copied to the `topics`, `flashcards`, `questions`, and `quizzes` subcollections to allow for efficient authorization checks without requiring `get()` calls to the parent course document.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is made by a signed-in user.
     * @returns {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user ID matches the provided user ID.
     * @param {string} userId The user ID to compare against.
     * @returns {boolean} True if the user IDs match, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is the owner of the existing document.
     * @param {string} userId The user ID of the document's owner.
     * @returns {boolean} True if the user is the owner and the document exists.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Checks if the authenticated user is the admin of the course.
     * @param {string} adminId The admin ID of the course.
     * @returns {boolean} True if the user is the admin of the course.
     */
    function isAdminOfCourse(adminId) {
        return isSignedIn() && request.auth.uid == adminId;
    }

    /**
     * @description Checks if the authenticated user is the admin of the existing course document.
     * @param {string} adminId The admin ID of the course.
     * @returns {boolean} True if the user is the admin of the course and the document exists.
     */
    function isExistingAdminOfCourse(adminId) {
        return isAdminOfCourse(adminId) && resource != null;
    }

    /**
     * @description
     *  - Secures the `/users/{userId}` collection.
     *  - Grants access to individual user documents based on ownership.
     *  - Denies listing of all users.
     * @path /databases/{database}/documents/users/{userId}
     * @allow (get) - Authenticated user can read their own profile: `auth.uid` is "user123".
     * @allow (create) - Authenticated user can create their own profile: `auth.uid` is "user123" and `request.resource.data.id` is "user123".
     * @allow (update) - Authenticated user can update their own profile: `auth.uid` is "user123".
     * @deny  (list) - No one can list all users.
     * @deny  (create) - Authenticated user cannot create a profile with mismatched id `auth.uid` is "user123" and `request.resource.data.id` is "otherUser".
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      // Read Rules
      allow get: if isOwner(userId);
      allow list: if false;

      // Write Rules
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Secures the `/courses/{courseId}` collection.
     * @path /databases/{database}/documents/courses/{courseId}
     * @allow (get, list) - Anyone can read/list courses.
     * @allow (create) - Only the admin can create a course, and must set adminId to their uid.
     * @allow (update, delete) - Only the admin who created the course can update/delete it.
     * @principle Public read access with owner-only writes, enforces adminId for creation and ownership.
     */
    match /courses/{courseId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.adminId == request.auth.uid;
      allow update: if isExistingAdminOfCourse(resource.data.adminId);
      allow delete: if isExistingAdminOfCourse(resource.data.adminId);
    }

    /**
     * @description Secures the `/courses/{courseId}/topics/{topicId}` collection.
     * @path /databases/{database}/documents/courses/{courseId}/topics/{topicId}
     * @allow (get, list) - Anyone can read/list topics.
     * @allow (create) - Only the admin of the course can create a topic. The adminId must match the course adminId.
     * @allow (update, delete) - Only the admin who created the course can update/delete topics.
     * @principle  Owner-only writes based on denormalized adminId, public read.
     */
    match /courses/{courseId}/topics/{topicId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.adminId == get(/databases/$(database)/documents/courses/$(courseId)).data.adminId;
      allow update: if isExistingAdminOfCourse(resource.data.adminId);
      allow delete: if isExistingAdminOfCourse(resource.data.adminId);
    }

    /**
     * @description Secures the `/courses/{courseId}/topics/{topicId}/flashcards/{flashcardId}` collection.
     * @path /databases/{database}/documents/courses/{courseId}/topics/{topicId}/flashcards/{flashcardId}
     * @allow (get, list) - Anyone can read/list flashcards.
     * @allow (create) - Only the admin of the course can create a flashcard.
     * @allow (update, delete) - Only the admin who created the course can update/delete flashcards.
     * @principle Owner-only writes based on denormalized adminId, public read.
     */
    match /courses/{courseId}/topics/{topicId}/flashcards/{flashcardId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.adminId == get(/databases/$(database)/documents/courses/$(courseId)).data.adminId;
      allow update: if isExistingAdminOfCourse(resource.data.adminId);
      allow delete: if isExistingAdminOfCourse(resource.data.adminId);
    }

    /**
     * @description Secures the `/courses/{courseId}/topics/{topicId}/questions/{questionId}` collection.
     * @path /databases/{database}/documents/courses/{courseId}/topics/{topicId}/questions/{questionId}
     * @allow (get, list) - Anyone can read/list questions.
     * @allow (create) - Only the admin of the course can create a question.
     * @allow (update, delete) - Only the admin who created the course can update/delete questions.
     * @principle Owner-only writes based on denormalized adminId, public read.
     */
    match /courses/{courseId}/topics/{topicId}/questions/{questionId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.adminId == get(/databases/$(database)/documents/courses/$(courseId)).data.adminId;
      allow update: if isExistingAdminOfCourse(resource.data.adminId);
      allow delete: if isExistingAdminOfCourse(resource.data.adminId);
    }

    /**
     * @description Secures the `/courses/{courseId}/topics/{topicId}/quizzes/{quizId}` collection.
     * @path /databases/{database}/documents/courses/{courseId}/topics/{topicId}/quizzes/{quizId}
     * @allow (get, list) - Anyone can read/list quizzes.
     * @allow (create) - Only the admin of the course can create a quiz.
     * @allow (update, delete) - Only the admin who created the course can update/delete quizzes.
     * @principle Owner-only writes based on denormalized adminId, public read.
     */
    match /courses/{courseId}/topics/{topicId}/quizzes/{quizId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.adminId == get(/databases/$(database)/documents/courses/$(courseId)).data.adminId;
      allow update: if isExistingAdminOfCourse(resource.data.adminId);
      allow delete: if isExistingAdminOfCourse(resource.data.adminId);
    }

    /**
     * @description Secures the `/users/{userId}/enrollments/{enrollmentId}` collection.
     * @path /databases/{database}/documents/users/{userId}/enrollments/{enrollmentId}
     * @allow (get, list) - Only the user can read/list their own enrollments.
     * @allow (create, update, delete) - Only the user can create, update, and delete their own enrollments.
     * @principle User-owned data, path-based ownership.
     */
    match /users/{userId}/enrollments/{enrollmentId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Secures the `/users/{userId}/quizAttempts/{quizAttemptId}` collection.
     * @path /databases/{database}/documents/users/{userId}/quizAttempts/{quizAttemptId}
     * @allow (get, list) - Only the user can read/list their own quiz attempts.
     * @allow (create, update, delete) - Only the user can create, update, and delete their own quiz attempts.
     * @principle User-owned data, path-based ownership.
     */
    match /users/{userId}/quizAttempts/{quizAttemptId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Secures the `/users/{userId}/performances/{performanceId}` collection.
     * @path /databases/{database}/documents/users/{userId}/performances/{performanceId}
     * @allow (get, list) - Only the user can read/list their own performance data.
     * @allow (create, update, delete) - Only the user can create, update, and delete their own performance data.
     * @principle User-owned data, path-based ownership.
     */
    match /users/{userId}/performances/{performanceId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Secures the `/users/{userId}/flashcardMastery/{flashcardId}` collection.
     * @path /databases/{database}/documents/users/{userId}/flashcardMastery/{flashcardId}
     * @allow (get, list) - Only the user can read/list their own flashcard mastery.
     * @allow (create, update, delete) - Only the user can create, update, and delete their own flashcard mastery.
     * @principle User-owned data, path-based ownership.
     */
    match /users/{userId}/flashcardMastery/{flashcardId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Secures the `/users/{userId}/userBadges/{userBadgeId}` collection.
     * @path /databases/{database}/documents/users/{userId}/userBadges/{userBadgeId}
     * @allow (get, list) - Only the user can read/list their own user badges.
     * @allow (create, update, delete) - Only the user can create, update, and delete their own user badges.
     * @principle User-owned data, path-based ownership.
     */
    match /users/{userId}/userBadges/{userBadgeId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Secures the `/badges/{badgeId}` collection.
     * @path /databases/{database}/documents/badges/{badgeId}
     * @allow (get, list) - Anyone can read/list badges.
     * @allow (create, update, delete) - No one can create, update, or delete badges.
     * @principle Public read, no writes allowed.
     */
    match /badges/{badgeId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
  }
}