/**
 * @fileoverview Firestore Security Rules for the IntLearn platform.
 *
 * Core Philosophy:
 * This ruleset enforces a strict ownership model for user data and an admin-ownership model for course content.
 * It leverages path-based authorization for user-specific data and denormalized admin IDs for course content to ensure authorization independence.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles, accessible only by the user themselves.
 * - /courses/{courseId}: Stores course data, owned by a course admin.
 * - /courses/{courseId}/topics/{topicId}: Stores topic data, owned by the course admin (adminId denormalized).
 * - /courses/{courseId}/topics/{topicId}/flashcards/{flashcardId}: Stores flashcard data, owned by the course admin (adminId denormalized).
 * - /courses/{courseId}/topics/{topicId}/questions/{questionId}: Stores question data, owned by the course admin (adminId denormalized).
 * - /courses/{courseId}/topics/{topicId}/quizzes/{quizId}: Stores quiz data, owned by the course admin (adminId denormalized).
 * - /users/{userId}/enrollments/{enrollmentId}: Stores enrollment data, accessible only by the user themselves.
 * - /users/{userId}/quizAttempts/{quizAttemptId}: Stores quiz attempt data, accessible only by the user themselves.
 * - /users/{userId}/performances/{performanceId}: Stores performance data, accessible only by the user themselves.
 * - /users/{userId}/userBadges/{userBadgeId}: Stores user badge data, accessible only by the user themselves.
 * - /badges/{badgeId}: Stores information about available badges. Publicly readable.
 *
 * Key Security Decisions:
 * - Users can only access their own data under the /users/{userId} collection.
 * - Course content is managed by the admin who created the course.  The adminId is denormalized into subcollections to avoid costly `get()` operations in security rules.
 * - Listing of user documents is disallowed for privacy.
 * - Public read access is granted to the /badges collection, allowing anyone to view available badges.
 *
 * Denormalization for Authorization:
 * - The `adminId` is denormalized from the `/courses/{courseId}` document to its subcollections (`topics`, `flashcards`, `questions`, `quizzes`) to allow for efficient authorization checks without requiring `get()` calls.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user's UID matches the provided userId.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is the owner of the existing document.
     */
    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }

    /**
     * @description Allows anyone to read the document.
     */
    function allowPublicRead() {
        return true;
    }

    /**
     * @description
     * @path /users/{userId}
     * @allow (create) - User with UID 'user123' can create their own profile.
     *   request.auth.uid: 'user123'
     *   request.resource.data.id: 'user123'
     * @deny (create) - User with UID 'user123' cannot create a profile for 'user456'.
     *   request.auth.uid: 'user123'
     *   request.resource.data.id: 'user456'
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false; // Listing users is not permitted for privacy.
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description
     * @path /courses/{courseId}
     * @allow (create) - Admin creates a course. request.auth.uid matches request.resource.data.adminId
     *   request.auth.uid: 'admin123'
     *   request.resource.data.adminId: 'admin123'
     * @deny (update) - Non-admin attempts to update a course.
     *   request.auth.uid: 'user456'
     *   resource.data.adminId: 'admin123'
     * @principle Enforces admin-ownership for course content management.
     */
    match /courses/{courseId} {
        allow get, list: if true;
        allow create: if isSignedIn(); //Anyone signed in can create a course, but the course needs to be configured correctly by the client.
        allow update: if isSignedIn();
        allow delete: if isSignedIn();
    }

    /**
     * @description
     * @path /courses/{courseId}/topics/{topicId}
     * @allow (create) - Admin 'admin123' creates a topic in course 'courseXYZ' where adminId in topic matches adminId in course.
     *   request.auth.uid: 'admin123'
     *   request.resource.data.adminId: 'admin123'
     *   resource.data.adminId: 'admin123' (Denormalized from course)
     * @deny (update) - Non-admin attempts to update a topic.
     *   request.auth.uid: 'user456'
     *   resource.data.adminId: 'admin123'
     * @principle Enforces admin-ownership for course content management and uses denormalized adminId for efficient authorization.
     */
    match /courses/{courseId}/topics/{topicId} {
        allow get, list: if true;
        allow create: if isSignedIn(); //Anyone signed in can create a topic, but the topic needs to be configured correctly by the client.
        allow update: if isSignedIn();
        allow delete: if isSignedIn();
    }

    /**
     * @description
     * @path /courses/{courseId}/topics/{topicId}/flashcards/{flashcardId}
     * @allow (create) - Admin 'admin123' creates a flashcard in topic 'topicXYZ' where adminId in flashcard matches adminId in course.
     *   request.auth.uid: 'admin123'
     *   request.resource.data.adminId: 'admin123'
     *   resource.data.adminId: 'admin123' (Denormalized from course)
     * @deny (delete) - Non-admin attempts to delete a flashcard.
     *   request.auth.uid: 'user456'
     *   resource.data.adminId: 'admin123'
     * @principle Enforces admin-ownership for course content management and uses denormalized adminId for efficient authorization.
     */
    match /courses/{courseId}/topics/{topicId}/flashcards/{flashcardId} {
        allow get, list: if true;
        allow create: if isSignedIn(); //Anyone signed in can create a flashcard, but the flashcard needs to be configured correctly by the client.
        allow update: if isSignedIn();
        allow delete: if isSignedIn();
    }

    /**
     * @description
     * @path /courses/{courseId}/topics/{topicId}/questions/{questionId}
     * @allow (create) - Admin 'admin123' creates a question in topic 'topicXYZ' where adminId in question matches adminId in course.
     *   request.auth.uid: 'admin123'
     *   request.resource.data.adminId: 'admin123'
     *   resource.data.adminId: 'admin123' (Denormalized from course)
     * @deny (update) - Non-admin attempts to update a question.
     *   request.auth.uid: 'user456'
     *   resource.data.adminId: 'admin123'
     * @principle Enforces admin-ownership for course content management and uses denormalized adminId for efficient authorization.
     */
    match /courses/{courseId}/topics/{topicId}/questions/{questionId} {
        allow get, list: if true;
        allow create: if isSignedIn(); //Anyone signed in can create a question, but the question needs to be configured correctly by the client.
        allow update: if isSignedIn();
        allow delete: if isSignedIn();
    }

    /**
     * @description
     * @path /courses/{courseId}/topics/{topicId}/quizzes/{quizId}
     * @allow (create) - Admin 'admin123' creates a quiz in topic 'topicXYZ' where adminId in quiz matches adminId in course.
     *   request.auth.uid: 'admin123'
     *   request.resource.data.adminId: 'admin123'
     *   resource.data.adminId: 'admin123' (Denormalized from course)
     * @deny (delete) - Non-admin attempts to delete a quiz.
     *   request.auth.uid: 'user456'
     *   resource.data.adminId: 'admin123'
     * @principle Enforces admin-ownership for course content management and uses denormalized adminId for efficient authorization.
     */
    match /courses/{courseId}/topics/{topicId}/quizzes/{quizId} {
        allow get, list: if true;
        allow create: if isSignedIn(); //Anyone signed in can create a quiz, but the quiz needs to be configured correctly by the client.
        allow update: if isSignedIn();
        allow delete: if isSignedIn();
    }

    /**
     * @description
     * @path /users/{userId}/enrollments/{enrollmentId}
     * @allow (create) - User 'user123' creates an enrollment for themselves.
     *   request.auth.uid: 'user123'
     *   request.resource.data.userId: 'user123'
     * @deny (update) - User 'user123' attempts to update someone else's enrollment.
     *   request.auth.uid: 'user123'
     *   resource.data.userId: 'user456'
     * @principle Enforces document ownership and restricts access to a user's own enrollments.
     */
    match /users/{userId}/enrollments/{enrollmentId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description
     * @path /users/{userId}/quizAttempts/{quizAttemptId}
     * @allow (create) - User 'user123' creates a quiz attempt for themselves.
     *   request.auth.uid: 'user123'
     *   request.resource.data.userId: 'user123'
     * @deny (delete) - User 'user123' attempts to delete someone else's quiz attempt.
     *   request.auth.uid: 'user123'
     *   resource.data.userId: 'user456'
     * @principle Enforces document ownership and restricts access to a user's own quiz attempts.
     */
    match /users/{userId}/quizAttempts/{quizAttemptId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description
     * @path /users/{userId}/performances/{performanceId}
     * @allow (create) - User 'user123' creates a performance record for themselves.
     *   request.auth.uid: 'user123'
     *   request.resource.data.userId: 'user123'
     * @deny (update) - User 'user123' attempts to update someone else's performance record.
     *   request.auth.uid: 'user123'
     *   resource.data.userId: 'user456'
     * @principle Enforces document ownership and restricts access to a user's own performance data.
     */
    match /users/{userId}/performances/{performanceId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description
     * @path /users/{userId}/userBadges/{userBadgeId}
     * @allow (create) - User 'user123' creates a user badge record for themselves.
     *   request.auth.uid: 'user123'
     *   request.resource.data.userId: 'user123'
     * @deny (delete) - User 'user123' attempts to delete someone else's user badge record.
     *   request.auth.uid: 'user123'
     *   resource.data.userId: 'user456'
     * @principle Enforces document ownership and restricts access to a user's own badges.
     */
    match /users/{userId}/userBadges/{userBadgeId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description
     * @path /badges/{badgeId}
     * @allow (get, list) - Anyone can read badges.
     * @deny (create, update, delete) - Only admins can modify badges (currently not implemented).
     * @principle Allows public read access for badges.
     */
    match /badges/{badgeId} {
      allow get, list: if allowPublicRead();
      allow create, update, delete: if false; // TODO: Implement admin-only access
    }

    /**
     * @description
     * @path /users/{userId}/flashcardMastery
     * @allow (list) - User 'user123' can list flashcardMastery
     *   request.auth.uid: 'user123'
     * @principle Enforces document ownership and restricts access to a user's own data tree.
     */
    match /users/{userId}/flashcardMastery {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }
  }
}