/**
 * @file Firebase Security Rules for IntLearn Platform
 *
 * @description This ruleset enforces a strict user-ownership model for user-specific data
 * and an admin-ownership model for course content. It prioritizes authorization
 * independence by denormalizing the `adminId` from courses into their subcollections
 * to avoid costly `get()` calls in the rules.
 *
 * @dataStructure
 * - /users/{userId}: Stores user profile information. Access is restricted to the user.
 * - /courses/{courseId}: Stores course information. Access is restricted to the admin who created the course.
 * - /courses/{courseId}/topics/{topicId}: Stores topics for a specific course. Includes denormalized 'adminId' for authorization.
 * - /courses/{courseId}/topics/{topicId}/flashcards/{flashcardId}: Stores flashcards. Includes denormalized 'adminId' for authorization.
 * - /courses/{courseId}/topics/{topicId}/questions/{questionId}: Stores questions. Includes denormalized 'adminId' for authorization.
 * - /courses/{courseId}/topics/{topicId}/quizzes/{quizId}: Stores quizzes. Includes denormalized 'adminId' for authorization.
 * - /users/{userId}/enrollments/{enrollmentId}: Stores enrollment information for a user.
 * - /users/{userId}/quizAttempts/{quizAttemptId}: Stores quiz attempts for a user.
 * - /users/{userId}/performances/{performanceId}: Stores performance data for a user.
 * - /users/{userId}/userBadges/{userBadgeId}: Stores badges earned by a user.
 * - /badges/{badgeId}: Stores information about available badges.
 *
 * @keySecurityDecisions
 * - Users can only access their own data under the /users/{userId} collection.
 * - Course content is owned by the admin who created the course, with ownership enforced via denormalized `adminId` in subcollections.
 * - Listing of all users is explicitly denied to protect user privacy.
 *
 * @denormalizationForAuthorization
 * - The `adminId` is denormalized from the `/courses/{courseId}` document into its subcollections
 *   (topics, flashcards, questions, quizzes) to allow authorization checks without requiring extra reads.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is authenticated.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user's ID matches the provided userId.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user's ID matches the provided adminId.
     */
    function isAdmin(adminId) {
      return isSignedIn() && request.auth.uid == adminId;
    }

    /**
     * @description Checks if the authenticated user's ID matches the document's owner. Also verifies that the document exists before allowing modification.
     */
    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }

    /**
     * @description Checks if the authenticated user's ID matches the document's admin. Also verifies that the document exists before allowing modification.
     */
    function isExistingAdmin(adminId) {
        return isAdmin(adminId) && resource != null;
    }

    /**
     * @description
     * Secures the `/users/{userId}` collection, allowing users to manage their own profiles.
     * @path /databases/{database}/documents/users/{userId}
     * @allow (create) - Authenticated user creates their profile with matching userId.
     * @allow (get) - Authenticated user reads their own profile.
     * @allow (update) - Authenticated user updates their own profile.
     * @allow (delete) - Authenticated user deletes their own profile.
     * @deny (create) - Authenticated user attempts to create a profile with a mismatched userId.
     * @deny (list) - Any user attempts to list all users.
     * @principle Enforces document ownership for all operations on user profiles.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false; // Prevent listing all users
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description
     * Secures the `/courses/{courseId}` collection, allowing admins to manage courses.
     * @path /databases/{database}/documents/courses/{courseId}
     * @allow (create) - Authenticated admin creates a new course.
     * @allow (get) - Authenticated user reads a course.
     * @allow (update) - Authenticated admin updates a course they own.
     * @allow (delete) - Authenticated admin deletes a course they own.
     * @deny (create) - Authenticated user attempts to create a course with a mismatched adminId.
     * @principle Enforces document ownership for all operations on courses, restricting write access to course admins.
     */
    match /courses/{courseId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.adminId == request.auth.uid;
      allow update: if isExistingAdmin(resource.data.adminId);
      allow delete: if isExistingAdmin(resource.data.adminId);
    }

    /**
     * @description
     * Secures the `/courses/{courseId}/topics/{topicId}` collection, allowing admins to manage topics within courses.
     * @path /databases/{database}/documents/courses/{courseId}/topics/{topicId}
     * @allow (create) - Authenticated admin creates a new topic for a course they own.
     * @allow (get) - Authenticated user reads a topic within a course.
     * @allow (update) - Authenticated admin updates a topic within a course they own.
     * @allow (delete) - Authenticated admin deletes a topic within a course they own.
     * @deny (create) - Authenticated user attempts to create a topic with a mismatched adminId.
     * @principle Enforces document ownership for all operations on topics, restricting write access to course admins.
     */
    match /courses/{courseId}/topics/{topicId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.adminId == request.auth.uid;
      allow update: if isExistingAdmin(resource.data.adminId);
      allow delete: if isExistingAdmin(resource.data.adminId);
    }

    /**
     * @description
     * Secures the `/courses/{courseId}/topics/{topicId}/flashcards/{flashcardId}` collection, allowing admins to manage flashcards within topics.
     * @path /databases/{database}/documents/courses/{courseId}/topics/{topicId}/flashcards/{flashcardId}
     * @allow (create) - Authenticated admin creates a new flashcard for a topic they own.
     * @allow (get) - Authenticated user reads a flashcard within a topic.
     * @allow (update) - Authenticated admin updates a flashcard within a topic they own.
     * @allow (delete) - Authenticated admin deletes a flashcard within a topic they own.
     * @deny (create) - Authenticated user attempts to create a flashcard with a mismatched adminId.
     * @principle Enforces document ownership for all operations on flashcards, restricting write access to course admins.
     */
    match /courses/{courseId}/topics/{topicId}/flashcards/{flashcardId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.adminId == request.auth.uid;
      allow update: if isExistingAdmin(resource.data.adminId);
      allow delete: if isExistingAdmin(resource.data.adminId);
    }

    /**
     * @description
     * Secures the `/courses/{courseId}/topics/{topicId}/questions/{questionId}` collection, allowing admins to manage questions within topics.
     * @path /databases/{database}/documents/courses/{courseId}/topics/{topicId}/questions/{questionId}
     * @allow (create) - Authenticated admin creates a new question for a topic they own.
     * @allow (get) - Authenticated user reads a question within a topic.
     * @allow (update) - Authenticated admin updates a question within a topic they own.
     * @allow (delete) - Authenticated admin deletes a question within a topic they own.
     * @deny (create) - Authenticated user attempts to create a question with a mismatched adminId.
     * @principle Enforces document ownership for all operations on questions, restricting write access to course admins.
     */
    match /courses/{courseId}/topics/{topicId}/questions/{questionId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.adminId == request.auth.uid;
      allow update: if isExistingAdmin(resource.data.adminId);
      allow delete: if isExistingAdmin(resource.data.adminId);
    }

    /**
     * @description
     * Secures the `/courses/{courseId}/topics/{topicId}/quizzes/{quizId}` collection, allowing admins to manage quizzes within topics.
     * @path /databases/{database}/documents/courses/{courseId}/topics/{topicId}/quizzes/{quizId}
     * @allow (create) - Authenticated admin creates a new quiz for a topic they own.
     * @allow (get) - Authenticated user reads a quiz within a topic.
     * @allow (update) - Authenticated admin updates a quiz within a topic they own.
     * @allow (delete) - Authenticated admin deletes a quiz within a topic they own.
     * @deny (create) - Authenticated user attempts to create a quiz with a mismatched adminId.
     * @principle Enforces document ownership for all operations on quizzes, restricting write access to course admins.
     */
    match /courses/{courseId}/topics/{topicId}/quizzes/{quizId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.adminId == request.auth.uid;
      allow update: if isExistingAdmin(resource.data.adminId);
      allow delete: if isExistingAdmin(resource.data.adminId);
    }

    /**
     * @description
     * Secures the `/users/{userId}/enrollments/{enrollmentId}` collection, allowing users to manage their own enrollments.
     * @path /databases/{database}/documents/users/{userId}/enrollments/{enrollmentId}
     * @allow (create) - Authenticated user creates their enrollment with matching userId.
     * @allow (get) - Authenticated user reads their own enrollment.
     * @allow (update) - Authenticated user updates their own enrollment.
     * @allow (delete) - Authenticated user deletes their own enrollment.
     * @deny (create) - Authenticated user attempts to create an enrollment with a mismatched userId.
     * @principle Enforces document ownership for all operations on enrollments.
     */
    match /users/{userId}/enrollments/{enrollmentId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description
     * Secures the `/users/{userId}/quizAttempts/{quizAttemptId}` collection, allowing users to manage their own quiz attempts.
     * @path /databases/{database}/documents/users/{userId}/quizAttempts/{quizAttemptId}
     * @allow (create) - Authenticated user creates their quiz attempt with matching userId.
     * @allow (get) - Authenticated user reads their own quiz attempt.
     * @allow (update) - Authenticated user updates their own quiz attempt.
     * @allow (delete) - Authenticated user deletes their own quiz attempt.
     * @deny (create) - Authenticated user attempts to create a quiz attempt with a mismatched userId.
     * @principle Enforces document ownership for all operations on quiz attempts.
     */
    match /users/{userId}/quizAttempts/{quizAttemptId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description
     * Secures the `/users/{userId}/performances/{performanceId}` collection, allowing users to manage their own performance data.
     * @path /databases/{database}/documents/users/{userId}/performances/{performanceId}
     * @allow (create) - Authenticated user creates their performance data with matching userId.
     * @allow (get) - Authenticated user reads their own performance data.
     * @allow (update) - Authenticated user updates their own performance data.
     * @allow (delete) - Authenticated user deletes their own performance data.
     * @deny (create) - Authenticated user attempts to create performance data with a mismatched userId.
     * @principle Enforces document ownership for all operations on performance data.
     */
    match /users/{userId}/performances/{performanceId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description
     * Secures the `/users/{userId}/userBadges/{userBadgeId}` collection, allowing users to manage their own user badges.
     * @path /databases/{database}/documents/users/{userId}/userBadges/{userBadgeId}
     * @allow (create) - Authenticated user creates their user badge with matching userId.
     * @allow (get) - Authenticated user reads their own user badge.
     * @allow (update) - Authenticated user updates their own user badge.
     * @allow (delete) - Authenticated user deletes their own user badge.
     * @deny (create) - Authenticated user attempts to create a user badge with a mismatched userId.
     * @principle Enforces document ownership for all operations on user badges.
     */
    match /users/{userId}/userBadges/{userBadgeId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description
     * Secures the `/badges/{badgeId}` collection, making it publicly readable.
     * @path /databases/{database}/documents/badges/{badgeId}
     * @allow (get) - Any user can read badge information.
     * @allow (list) - Any user can list available badges.
     * @principle Allows public read access to badge information.
     */
    match /badges/{badgeId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }
  }
}