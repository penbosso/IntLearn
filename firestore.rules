/**
 * @fileOverview Firestore Security Rules for the IntLearn platform.
 *
 * Core Philosophy:
 * This ruleset enforces a combination of user-ownership and admin-ownership models.
 * User-specific data is stored under `/users/{userId}` and is generally accessible only to the user themselves.
 * Courses and their related content (topics, flashcards, quizzes, questions) are owned by admins.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information.
 * - /courses/{courseId}: Stores course information, owned by the adminId.
 * - /courses/{courseId}/topics/{topicId}: Stores topics for a specific course. Includes denormalized 'adminId' from the parent course for authorization independence.
 * - /courses/{courseId}/topics/{topicId}/flashcards/{flashcardId}: Stores flashcards for a specific topic. Includes denormalized 'adminId' from the parent course for authorization independence.
 * - /courses/{courseId}/topics/{topicId}/questions/{questionId}: Stores questions for a specific topic. Includes denormalized 'adminId' from the parent course for authorization independence.
 * - /courses/{courseId}/topics/{topicId}/quizzes/{quizId}: Stores quizzes for a specific topic. Includes denormalized 'adminId' from the parent course for authorization independence.
 * - /users/{userId}/enrollments/{enrollmentId}: Stores enrollment information for a user.
 * - /users/{userId}/quizAttempts/{quizAttemptId}: Stores quiz attempts for a user.
 * - /users/{userId}/performances/{performanceId}: Stores performance data for a user.
 * - /users/{userId}/flashcardMastery/{flashcardId}: Stores flashcard mastery data for a user.
 * - /users/{userId}/userBadges/{userBadgeId}: Stores badges earned by a user.
 * - /badges/{badgeId}: Stores information about available badges.
 *
 * Key Security Decisions:
 * - User data is strictly controlled via path-based ownership.
 * - Course content is owned by admins; admin ownership is denormalized to subcollections.
 * - Data validation is relaxed in this prototyping phase, but ownership is strictly enforced.
 * - Listing operations are generally allowed for owners of user-scoped subcollections.
 *
 * Denormalization for Authorization:
 * - The `adminId` is denormalized from the `/courses/{courseId}` document into its subcollections
 *   (`/courses/{courseId}/topics/{topicId}`, etc.) to allow for efficient authorization checks without
 *   requiring `get()` calls.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is authenticated.
     * @returns {boolean} True if the request is authenticated, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user ID matches the provided user ID.
     * @param {string} userId - The user ID to compare against.
     * @returns {boolean} True if the authenticated user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is the owner and the resource exists.
     *              This function is important for update and delete operations to prevent
     *              modifying or deleting non-existent documents.
     * @param {string} userId - The user ID to compare against.
     * @returns {boolean} True if the authenticated user is the owner and the resource exists.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Checks if the authenticated user is the admin of the resource.
     * @param {string} adminId - The admin ID to compare against.
     * @returns {boolean} True if the authenticated user is the admin, false otherwise.
     */
    function isAdmin(adminId) {
      return isSignedIn() && request.auth.uid == adminId;
    }

    /**
     * @description Checks if the authenticated user is the admin and the resource exists.
     * @param {string} adminId - The admin ID to compare against.
     * @returns {boolean} True if the authenticated user is the admin and the resource exists.
     */
    function isExistingAdmin(adminId) {
      return isAdmin(adminId) && resource != null;
    }

    /**
     * @description Rules for user profile documents.
     * @path /users/{userId}
     * @allow (create) - Authenticated user can create their own profile if the userId matches their auth.uid.
     * @allow (get, update, delete) - Authenticated user can access and modify their own profile if the userId matches their auth.uid.
     * @deny (create) - An unauthenticated user cannot create a profile.
     * @deny (update, delete) - An unauthenticated user cannot modify or delete a profile.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      allow get: if true;
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for course documents.
     * @path /courses/{courseId}
     * @allow (create) - Authenticated user can create a course if the adminId matches their auth.uid.
     * @allow (get, update, delete) - Authenticated user can access and modify their own course if the adminId matches their auth.uid.
     * @deny (create) - An unauthenticated user cannot create a course.
     * @deny (update, delete) - An unauthenticated user cannot modify or delete a course.
     * @principle Enforces document ownership for writes.
     */
    match /courses/{courseId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && request.resource.data.adminId == request.auth.uid;
      allow update: if isExistingAdmin(resource.data.adminId);
      allow delete: if isExistingAdmin(resource.data.adminId);
    }

    /**
     * @description Rules for topic documents.
     * @path /courses/{courseId}/topics/{topicId}
     * @allow (create) - Authenticated user can create a topic if the adminId matches their auth.uid. The adminId is denormalized from the parent course.
     * @allow (get, update, delete) - Authenticated user can access and modify their own topic if the adminId matches their auth.uid.
     * @deny (create) - An unauthenticated user cannot create a topic.
     * @deny (update, delete) - An unauthenticated user cannot modify or delete a topic.
     * @principle Enforces document ownership for writes using denormalized adminId.
     */
    match /courses/{courseId}/topics/{topicId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && request.resource.data.courseId == courseId && isAdmin(get(/databases/$(database)/documents/courses/$(courseId)).data.adminId);
      allow update: if isExistingAdmin(get(/databases/$(database)/documents/courses/$(courseId)).data.adminId);
      allow delete: if isExistingAdmin(get(/databases/$(database)/documents/courses/$(courseId)).data.adminId);
    }

    /**
     * @description Rules for flashcard documents.
     * @path /courses/{courseId}/topics/{topicId}/flashcards/{flashcardId}
     * @allow (create) - Authenticated user can create a flashcard if the adminId matches their auth.uid. The adminId is denormalized from the parent course.
     * @allow (get, update, delete) - Authenticated user can access and modify their own flashcard if the adminId matches their auth.uid.
     * @deny (create) - An unauthenticated user cannot create a flashcard.
     * @deny (update, delete) - An unauthenticated user cannot modify or delete a flashcard.
     * @principle Enforces document ownership for writes using denormalized adminId.
     */
    match /courses/{courseId}/topics/{topicId}/flashcards/{flashcardId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && request.resource.data.topicId == topicId && isAdmin(get(/databases/$(database)/documents/courses/$(courseId)).data.adminId);
      allow update: if isExistingAdmin(get(/databases/$(database)/documents/courses/$(courseId)).data.adminId);
      allow delete: if isExistingAdmin(get(/databases/$(database)/documents/courses/$(courseId)).data.adminId);
    }

    /**
     * @description Rules for question documents.
     * @path /courses/{courseId}/topics/{topicId}/questions/{questionId}
     * @allow (create) - Authenticated user can create a question if the adminId matches their auth.uid. The adminId is denormalized from the parent course.
     * @allow (get, update, delete) - Authenticated user can access and modify their own question if the adminId matches their auth.uid.
     * @deny (create) - An unauthenticated user cannot create a question.
     * @deny (update, delete) - An unauthenticated user cannot modify or delete a question.
     * @principle Enforces document ownership for writes using denormalized adminId.
     */
    match /courses/{courseId}/topics/{topicId}/questions/{questionId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && request.resource.data.topicId == topicId && isAdmin(get(/databases/$(database)/documents/courses/$(courseId)).data.adminId);
      allow update: if isExistingAdmin(get(/databases/$(database)/documents/courses/$(courseId)).data.adminId);
      allow delete: if isExistingAdmin(get(/databases/$(database)/documents/courses/$(courseId)).data.adminId);
    }

    /**
     * @description Rules for quiz documents.
     * @path /courses/{courseId}/topics/{topicId}/quizzes/{quizId}
     * @allow (create) - Authenticated user can create a quiz if the adminId matches their auth.uid. The adminId is denormalized from the parent course.
     * @allow (get, update, delete) - Authenticated user can access and modify their own quiz if the adminId matches their auth.uid.
     * @deny (create) - An unauthenticated user cannot create a quiz.
     * @deny (update, delete) - An unauthenticated user cannot modify or delete a quiz.
     * @principle Enforces document ownership for writes using denormalized adminId.
     */
    match /courses/{courseId}/topics/{topicId}/quizzes/{quizId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && request.resource.data.topicId == topicId && isAdmin(get(/databases/$(database)/documents/courses/$(courseId)).data.adminId);
      allow update: if isExistingAdmin(get(/databases/$(database)/documents/courses/$(courseId)).data.adminId);
      allow delete: if isExistingAdmin(get(/databases/$(database)/documents/courses/$(courseId)).data.adminId);
    }

    /**
     * @description Rules for enrollment documents.
     * @path /users/{userId}/enrollments/{enrollmentId}
     * @allow (get, update, delete) - Authenticated user can access and modify their own enrollment if the userId matches their auth.uid.
     * @deny (create) - An unauthenticated user cannot create an enrollment.
     * @deny (update, delete) - An unauthenticated user cannot modify or delete an enrollment.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/enrollments/{enrollmentId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for quiz attempt documents.
     * @path /users/{userId}/quizAttempts/{quizAttemptId}
     * @allow (get, update, delete) - Authenticated user can access and modify their own quiz attempt if the userId matches their auth.uid.
     * @deny (create) - An unauthenticated user cannot create a quiz attempt.
     * @deny (update, delete) - An unauthenticated user cannot modify or delete a quiz attempt.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/quizAttempts/{quizAttemptId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for performance documents.
     * @path /users/{userId}/performances/{performanceId}
     * @allow (get, update, delete) - Authenticated user can access and modify their own performance data if the userId matches their auth.uid.
     * @deny (create) - An unauthenticated user cannot create a performance document.
     * @deny (update, delete) - An unauthenticated user cannot modify or delete a performance document.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/performances/{performanceId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for flashcard mastery documents.
     * @path /users/{userId}/flashcardMastery/{flashcardId}
     * @allow (get, update, delete) - Authenticated user can access and modify their own flashcard mastery if the userId matches their auth.uid.
     * @deny (create) - An unauthenticated user cannot create a flashcard mastery document.
     * @deny (update, delete) - An unauthenticated user cannot modify or delete a flashcard mastery document.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/flashcardMastery/{flashcardId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for user badge documents.
     * @path /users/{userId}/userBadges/{userBadgeId}
     * @allow (get, update, delete) - Authenticated user can access and modify their own user badge if the userId matches their auth.uid.
     * @deny (create) - An unauthenticated user cannot create a user badge document.
     * @deny (update, delete) - An unauthenticated user cannot modify or delete a user badge document.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/userBadges/{userBadgeId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for badge documents.
     * @path /badges/{badgeId}
     */
    match /badges/{badgeId} {
      allow get: if true;
      allow list: if true;
      allow create: if false; // TODO: Only admins should be able to create badges
      allow update: if false; // TODO: Only admins should be able to update badges
      allow delete: if false; // TODO: Only admins should be able to delete badges
    }
  }
}