rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Enforces user-only access to user profile information.
     * @path /users/{userId}
     * @allow (create) User with ID 'user123' can create their profile.
     *   request.auth.uid == 'user123'
     *   request.resource.data.id == 'user123'
     * @allow (get) User with ID 'user123' can read their profile.
     *   request.auth.uid == 'user123'
     * @allow (update) User with ID 'user123' can update their profile.
     *   request.auth.uid == 'user123'
     * @allow (delete) User with ID 'user123' can delete their profile.
     *   request.auth.uid == 'user123'
     * @deny (create) User with ID 'user123' cannot create a profile with ID 'user456'.
     *   request.auth.uid == 'user123'
     *   request.resource.data.id == 'user456'
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.auth.uid == userId;
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Controls access to course information, allowing admins to manage their courses.
     * @path /courses/{courseId}
     * @allow (create) Admin 'admin123' can create a course.
     *   request.auth.uid == 'admin123'
     *   request.resource.data.adminId == 'admin123'
     * @allow (get) Any signed-in user can read course information.
     *   request.auth != null
     * @allow (update) Admin 'admin123' can update a course they own.
     *   request.auth.uid == 'admin123'
     *   resource.data.adminId == 'admin123'
     * @allow (delete) Admin 'admin123' can delete a course they own.
     *   request.auth.uid == 'admin123'
     *   resource.data.adminId == 'admin123'
     * @deny (create) User 'user456' cannot create a course as admin 'admin123'.
     *   request.auth.uid == 'user456'
     *   request.resource.data.adminId == 'admin123'
     * @principle Enforces admin-based ownership for courses.
     */
    match /courses/{courseId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn() && request.resource.data.adminId == request.auth.uid;
      allow update: if isSignedIn() && resource.data.adminId == request.auth.uid;
      allow delete: if isSignedIn() && resource.data.adminId == request.auth.uid;
    }

    /**
     * @description Manages access to topics within a course, ensuring only the course admin can modify them.
     * @path /courses/{courseId}/topics/{topicId}
     * @allow (create) Admin 'admin123' can create a topic within their course.
     *   request.auth.uid == 'admin123'
     *   get(/databases/$(database)/documents/courses/$(courseId)).data.adminId == 'admin123'
     * @allow (get) Any signed-in user can read a topic.
     *   request.auth != null
     * @allow (update) Admin 'admin123' can update a topic within their course.
     *   request.auth.uid == 'admin123'
     *   get(/databases/$(database)/documents/courses/$(courseId)).data.adminId == 'admin123'
     * @allow (delete) Admin 'admin123' can delete a topic within their course.
     *   request.auth.uid == 'admin123'
     *   get(/databases/$(database)/documents/courses/$(courseId)).data.adminId == 'admin123'
     * @deny (create) User 'user456' cannot create a topic in a course owned by 'admin123'.
     *   request.auth.uid == 'user456'
     *   get(/databases/$(database)/documents/courses/$(courseId)).data.adminId == 'admin123'
     * @principle Ensures that only the course admin can modify topics.
     */
    match /courses/{courseId}/topics/{topicId} {
      allow get, list: if isSignedIn();
      allow create: if isAdminForCourse(courseId);
      allow update: if isAdminForCourse(courseId);
      allow delete: if isAdminForCourse(courseId);
    }

    /**
     * @description Controls access to flashcards, restricting modifications to the course admin.
     * @path /courses/{courseId}/topics/{topicId}/flashcards/{flashcardId}
     * @allow (create) Admin 'admin123' can create a flashcard in their course's topic.
     *   request.auth.uid == 'admin123'
     *   get(/databases/$(database)/documents/courses/$(courseId)).data.adminId == 'admin123'
     * @allow (get) Any signed-in user can read a flashcard.
     *   request.auth != null
     * @allow (update) Admin 'admin123' can update a flashcard in their course's topic.
     *   request.auth.uid == 'admin123'
     *   get(/databases/$(database)/documents/courses/$(courseId)).data.adminId == 'admin123'
     * @allow (delete) Admin 'admin123' can delete a flashcard in their course's topic.
     *   request.auth.uid == 'admin123'
     *   get(/databases/$(database)/documents/courses/$(courseId)).data.adminId == 'admin123'
     * @deny (create) User 'user456' cannot create a flashcard in a topic owned by 'admin123'.
     *   request.auth.uid == 'user456'
     *   get(/databases/$(database)/documents/courses/$(courseId)).data.adminId == 'admin123'
     * @principle Enforces admin control over flashcard modifications.
     */
    match /courses/{courseId}/topics/{topicId}/flashcards/{flashcardId} {
      allow get, list: if isSignedIn();
      allow create: if isAdminForCourse(courseId);
      allow update: if isAdminForCourse(courseId);
      allow delete: if isAdminForCourse(courseId);
    }

    /**
     * @description Manages access to questions, limiting modifications to the course admin.
     * @path /courses/{courseId}/topics/{topicId}/questions/{questionId}
     * @allow (create) Admin 'admin123' can create a question in their course's topic.
     *   request.auth.uid == 'admin123'
     *   get(/databases/$(database)/documents/courses/$(courseId)).data.adminId == 'admin123'
     * @allow (get) Any signed-in user can read a question.
     *   request.auth != null
     * @allow (update) Admin 'admin123' can update a question in their course's topic.
     *   request.auth.uid == 'admin123'
     *   get(/databases/$(database)/documents/courses/$(courseId)).data.adminId == 'admin123'
     * @allow (delete) Admin 'admin123' can delete a question in their course's topic.
     *   request.auth.uid == 'admin123'
     *   get(/databases/$(database)/documents/courses/$(courseId)).data.adminId == 'admin123'
     * @deny (create) User 'user456' cannot create a question in a topic owned by 'admin123'.
     *   request.auth.uid == 'user456'
     *   get(/databases/$(database)/documents/courses/$(courseId)).data.adminId == 'admin123'
     * @principle Enforces admin control over question modifications.
     */
    match /courses/{courseId}/topics/{topicId}/questions/{questionId} {
      allow get, list: if isSignedIn();
      allow create: if isAdminForCourse(courseId);
      allow update: if isAdminForCourse(courseId);
      allow delete: if isAdminForCourse(courseId);
    }

    /**
     * @description Controls access to quizzes, restricting modifications to the course admin.
     * @path /courses/{courseId}/topics/{topicId}/quizzes/{quizId}
     * @allow (create) Admin 'admin123' can create a quiz in their course's topic.
     *   request.auth.uid == 'admin123'
     *   get(/databases/$(database)/documents/courses/$(courseId)).data.adminId == 'admin123'
     * @allow (get) Any signed-in user can read a quiz.
     *   request.auth != null
     * @allow (update) Admin 'admin123' can update a quiz in their course's topic.
     *   request.auth.uid == 'admin123'
     *   get(/databases/$(database)/documents/courses/$(courseId)).data.adminId == 'admin123'
     * @allow (delete) Admin 'admin123' can delete a quiz in their course's topic.
     *   request.auth.uid == 'admin123'
     *   get(/databases/$(database)/documents/courses/$(courseId)).data.adminId == 'admin123'
     * @deny (create) User 'user456' cannot create a quiz in a topic owned by 'admin123'.
     *   request.auth.uid == 'user456'
     *   get(/databases/$(database)/documents/courses/$(courseId)).data.adminId == 'admin123'
     * @principle Enforces admin control over quiz modifications.
     */
    match /courses/{courseId}/topics/{topicId}/quizzes/{quizId} {
      allow get, list: if isSignedIn();
      allow create: if isAdminForCourse(courseId);
      allow update: if isAdminForCourse(courseId);
      allow delete: if isAdminForCourse(courseId);
    }

    /**
     * @description Enforces user-only access to enrollment information.
     * @path /users/{userId}/enrollments/{enrollmentId}
     * @allow (create) User with ID 'user123' can create their enrollment.
     *   request.auth.uid == 'user123'
     * @allow (get) User with ID 'user123' can read their enrollment.
     *   request.auth.uid == 'user123'
     * @allow (list) User with ID 'user123' can list their enrollments.
     *   request.auth.uid == 'user123'
     * @allow (update) User with ID 'user123' can update their enrollment.
     *   request.auth.uid == 'user123'
     * @allow (delete) User with ID 'user123' can delete their enrollment.
     *   request.auth.uid == 'user123'
     * @deny (create) User with ID 'user123' cannot create an enrollment for 'user456'.
     *   request.auth.uid == 'user123'
     *   request.resource.data.userId == 'user456'
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/enrollments/{enrollmentId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Enforces user-only access to quiz attempt information.
     * @path /users/{userId}/quizAttempts/{quizAttemptId}
     * @allow (create) User with ID 'user123' can create their quiz attempt.
     *   request.auth.uid == 'user123'
     * @allow (get) User with ID 'user123' can read their quiz attempt.
     *   request.auth.uid == 'user123'
     * @allow (list) User with ID 'user123' can list their quiz attempts.
     *   request.auth.uid == 'user123'
     * @allow (update) User with ID 'user123' can update their quiz attempt.
     *   request.auth.uid == 'user123'
     * @allow (delete) User with ID 'user123' can delete their quiz attempt.
     *   request.auth.uid == 'user123'
     * @deny (create) User with ID 'user123' cannot create a quiz attempt for 'user456'.
     *   request.auth.uid == 'user123'
     *   request.resource.data.userId == 'user456'
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/quizAttempts/{quizAttemptId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Enforces user-only access to performance data.
     * @path /users/{userId}/performances/{performanceId}
     * @allow (create) User with ID 'user123' can create their performance data.
     *   request.auth.uid == 'user123'
     * @allow (get) User with ID 'user123' can read their performance data.
     *   request.auth.uid == 'user123'
     * @allow (list) User with ID 'user123' can list their performance data.
     *   request.auth.uid == 'user123'
     * @allow (update) User with ID 'user123' can update their performance data.
     *   request.auth.uid == 'user123'
     * @allow (delete) User with ID 'user123' can delete their performance data.
     *   request.auth.uid == 'user123'
     * @deny (create) User with ID 'user123' cannot create performance data for 'user456'.
     *   request.auth.uid == 'user123'
     *   request.resource.data.userId == 'user456'
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/performances/{performanceId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Enforces user-only access to user badges.
     * @path /users/{userId}/userBadges/{userBadgeId}
     * @allow (create) User with ID 'user123' can create their user badge.
     *   request.auth.uid == 'user123'
     * @allow (get) User with ID 'user123' can read their user badge.
     *   request.auth.uid == 'user123'
     * @allow (list) User with ID 'user123' can list their user badges.
     *   request.auth.uid == 'user123'
     * @allow (update) User with ID 'user123' can update their user badge.
     *   request.auth.uid == 'user123'
     * @allow (delete) User with ID 'user123' can delete their user badge.
     *   request.auth.uid == 'user123'
     * @deny (create) User with ID 'user123' cannot create a user badge for 'user456'.
     *   request.auth.uid == 'user123'
     *   request.resource.data.userId == 'user456'
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/userBadges/{userBadgeId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

        /**
     * @description Allows public read access to badge information.
     * @path /badges/{badgeId}
     * @allow (get) Any user can read badge information.
     *   request.auth != null
     * @allow (list) Any user can list badge information.
     *   request.auth != null
     * @deny (create) No one can create badges. // TODO: Add admin-only creation
     *   request.auth != null
     * @deny (update) No one can update badges. // TODO: Add admin-only updates
     *   request.auth != null
     * @deny (delete) No one can delete badges. // TODO: Add admin-only deletion
     *   request.auth != null
     * @principle Public read, restricted write.
     */
    match /badges/{badgeId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add admin-only creation, update, and delete.
    }
    
        /**
     * @description Enforces user-only access to flashcardMastery information.
     * @path /users/{userId}/flashcardMastery/{flashcardMasteryId}
     * @allow (create) User with ID 'user123' can create their flashcardMastery data.
     *   request.auth.uid == 'user123'
     * @allow (get) User with ID 'user123' can read their flashcardMastery data.
     *   request.auth.uid == 'user123'
     * @allow (list) User with ID 'user123' can list their flashcardMastery data.
     *   request.auth.uid == 'user123'
     * @allow (update) User with ID 'user123' can update their flashcardMastery data.
     *   request.auth.uid == 'user123'
     * @allow (delete) User with ID 'user123' can delete their flashcardMastery data.
     *   request.auth.uid == 'user123'
     * @deny (create) User with ID 'user123' cannot create flashcardMastery data for 'user456'.
     *   request.auth.uid == 'user123'
     *   request.resource.data.userId == 'user456'
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/flashcardMastery/{flashcardMasteryId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }
  }

  // Helper functions
  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return request.auth.uid == userId;
  }

  function isExistingOwner(userId) {
    return isOwner(userId) && resource.data.id == userId;
  }

  function isAdminForCourse(courseId) {
    return isSignedIn() && get(/databases/$(database)/documents/courses/$(courseId)).data.adminId == request.auth.uid;
  }

  function isExistingAdmin(adminId) {
    return isSignedIn() && request.auth.uid == adminId;
  }

    function isExistingAdminForCourse(courseId) {
    return isSignedIn() && get(/databases/$(database)/documents/courses/$(courseId)).data.adminId == request.auth.uid;
  }
}