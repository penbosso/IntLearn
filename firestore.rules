/**
 * @fileoverview Firestore Security Rules for the IntLearn platform.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user-specific data and an admin-ownership model for course content.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information, accessible only by the user and potentially admins.
 * - /courses/{courseId}: Stores course information, owned by an admin. The adminId is denormalized to subcollections for authorization.
 * - /courses/{courseId}/topics/{topicId}: Stores topics within a course.
 * - /courses/{courseId}/topics/{topicId}/flashcards/{flashcardId}: Stores flashcards for a topic.
 * - /courses/{courseId}/topics/{topicId}/questions/{questionId}: Stores questions for a topic.
 * - /courses/{courseId}/topics/{topicId}/quizzes/{quizId}: Stores quizzes for a topic.
 * - /users/{userId}/enrollments/{enrollmentId}: Stores enrollment information for a user.
 * - /users/{userId}/quizAttempts/{quizAttemptId}: Stores quiz attempts for a user.
 * - /users/{userId}/performances/{performanceId}: Stores performance data for a user.
 * - /users/{userId}/userBadges/{userBadgeId}: Stores badges earned by a user.
 * - /badges/{badgeId}: Stores information about available badges (public read).
 *
 * Key Security Decisions:
 * - User data is strictly limited to the owning user.
 * - Course content is owned by the admin who created the course. Ownership is enforced through the 'adminId' field.
 * - List operations are generally allowed for owners of user subcollections.
 *
 * Denormalization for Authorization:
 * - The `adminId` is denormalized from the `Course` document to all documents in its subcollections (`topics`, `flashcards`, `questions`, `quizzes`) to enable efficient authorization checks without needing extra `get()` calls.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile information.
     * @path /users/{userId}
     * @allow (create) - If the user ID in the path matches the authenticated user's ID.
     * @allow (get, list, update, delete) - If the user ID in the path matches the authenticated user's ID.
     * @deny (create) - If the user ID in the path does not match the authenticated user's ID.
     * @deny (get, list, update, delete) - If the user ID in the path does not match the authenticated user's ID.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;
      allow get, list: if isSignedIn() && isOwner(userId);
      allow update, delete: if isSignedIn() && isOwner(userId) && resource != null;
    }

    /**
     * @description Controls access to course information.
     * @path /courses/{courseId}
     * @allow (create) - If the user is signed in. The adminId must be set to the user's ID.
     * @allow (get, list) - If true (public read).
     * @allow (update, delete) - If the user is the admin who created the course (adminId matches request.auth.uid) and the document exists.
     * @deny (create) - If the user is not signed in or the adminId is not set to the user's ID.
     * @deny (update, delete) - If the user is not the admin who created the course or the document does not exist.
     * @principle Enforces admin ownership for courses. Allows public read access.
     */
    match /courses/{courseId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow create: if isSignedIn() && request.resource.data.adminId == request.auth.uid;
      allow get, list: if true;
      allow update, delete: if isSignedIn() && resource != null && resource.data.adminId == request.auth.uid;
    }

    /**
     * @description Controls access to topics within a course.
     * @path /courses/{courseId}/topics/{topicId}
     * @allow (create) - If the user is the admin of the course (adminId in the request matches the course's adminId).
     * @allow (get, list) - If true (public read).
     * @allow (update, delete) - If the user is the admin of the course and the document exists.
     * @deny (create) - If the user is not the admin of the course.
     * @deny (update, delete) - If the user is not the admin of the course or the document does not exist.
     * @principle Enforces admin ownership for course topics. Allows public read access. Denormalizes adminId from course.
     */
    match /courses/{courseId}/topics/{topicId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow create: if isSignedIn() && request.resource.data.adminId == get(/databases/$(database)/documents/courses/$(courseId)).data.adminId;
      allow get, list: if true;
      allow update, delete: if isSignedIn() && resource != null && resource.data.adminId == get(/databases/$(database)/documents/courses/$(courseId)).data.adminId;
    }

    /**
     * @description Controls access to flashcards within a topic.
     * @path /courses/{courseId}/topics/{topicId}/flashcards/{flashcardId}
     * @allow (create) - If the user is the admin of the course.
     * @allow (get, list) - If true (public read).
     * @allow (update, delete) - If the user is the admin of the course and the document exists.
     * @deny (create) - If the user is not the admin of the course.
     * @deny (update, delete) - If the user is not the admin of the course or the document does not exist.
     * @principle Enforces admin ownership for flashcards. Allows public read access. Denormalizes adminId from course.
     */
    match /courses/{courseId}/topics/{topicId}/flashcards/{flashcardId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow create: if isSignedIn() && request.resource.data.adminId == get(/databases/$(database)/documents/courses/$(courseId)).data.adminId;
      allow get, list: if true;
      allow update, delete: if isSignedIn() && resource != null && resource.data.adminId == get(/databases/$(database)/documents/courses/$(courseId)).data.adminId;
    }

    /**
     * @description Controls access to questions within a topic.
     * @path /courses/{courseId}/topics/{topicId}/questions/{questionId}
     * @allow (create) - If the user is the admin of the course.
     * @allow (get, list) - If true (public read).
     * @allow (update, delete) - If the user is the admin of the course and the document exists.
     * @deny (create) - If the user is not the admin of the course.
     * @deny (update, delete) - If the user is not the admin of the course or the document does not exist.
     * @principle Enforces admin ownership for questions. Allows public read access. Denormalizes adminId from course.
     */
    match /courses/{courseId}/topics/{topicId}/questions/{questionId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow create: if isSignedIn() && request.resource.data.adminId == get(/databases/$(database)/documents/courses/$(courseId)).data.adminId;
      allow get, list: if true;
      allow update, delete: if isSignedIn() && resource != null && resource.data.adminId == get(/databases/$(database)/documents/courses/$(courseId)).data.adminId;
    }

    /**
     * @description Controls access to quizzes within a topic.
     * @path /courses/{courseId}/topics/{topicId}/quizzes/{quizId}
     * @allow (create) - If the user is the admin of the course.
     * @allow (get, list) - If true (public read).
     * @allow (update, delete) - If the user is the admin of the course and the document exists.
     * @deny (create) - If the user is not the admin of the course.
     * @deny (update, delete) - If the user is not the admin of the course or the document does not exist.
     * @principle Enforces admin ownership for quizzes. Allows public read access. Denormalizes adminId from course.
     */
    match /courses/{courseId}/topics/{topicId}/quizzes/{quizId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow create: if isSignedIn() && request.resource.data.adminId == get(/databases/$(database)/documents/courses/$(courseId)).data.adminId;
      allow get, list: if true;
      allow update, delete: if isSignedIn() && resource != null && resource.data.adminId == get(/databases/$(database)/documents/courses/$(courseId)).data.adminId;
    }

    /**
     * @description Controls access to enrollment information for a user.
     * @path /users/{userId}/enrollments/{enrollmentId}
     * @allow (create) - If the user ID in the path matches the authenticated user's ID.
     * @allow (get, list) - If the user ID in the path matches the authenticated user's ID.
     * @allow (update, delete) - If the user ID in the path matches the authenticated user's ID and the document exists.
     * @deny (create) - If the user ID in the path does not match the authenticated user's ID.
     * @deny (update, delete) - If the user ID in the path does not match the authenticated user's ID or the document does not exist.
     * @principle Enforces document ownership for enrollments.
     */
    match /users/{userId}/enrollments/{enrollmentId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
      allow get, list: if isSignedIn() && isOwner(userId);
      allow update, delete: if isSignedIn() && isOwner(userId) && resource != null;
    }

    /**
     * @description Controls access to quiz attempts for a user.
     * @path /users/{userId}/quizAttempts/{quizAttemptId}
     * @allow (create) - If the user ID in the path matches the authenticated user's ID.
     * @allow (get, list) - If the user ID in the path matches the authenticated user's ID.
     * @allow (update, delete) - If the user ID in the path matches the authenticated user's ID and the document exists.
     * @deny (create) - If the user ID in the path does not match the authenticated user's ID.
     * @deny (update, delete) - If the user ID in the path does not match the authenticated user's ID or the document does not exist.
     * @principle Enforces document ownership for quiz attempts.
     */
    match /users/{userId}/quizAttempts/{quizAttemptId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
      allow get, list: if isSignedIn() && isOwner(userId);
      allow update, delete: if isSignedIn() && isOwner(userId) && resource != null;
    }

    /**
     * @description Controls access to performance data for a user.
     * @path /users/{userId}/performances/{performanceId}
     * @allow (create) - If the user ID in the path matches the authenticated user's ID.
     * @allow (get, list) - If the user ID in the path matches the authenticated user's ID.
     * @allow (update, delete) - If the user ID in the path matches the authenticated user's ID and the document exists.
     * @deny (create) - If the user ID in the path does not match the authenticated user's ID.
     * @deny (update, delete) - If the user ID in the path does not match the authenticated user's ID or the document does not exist.
     * @principle Enforces document ownership for performance data.
     */
    match /users/{userId}/performances/{performanceId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
      allow get, list: if isSignedIn() && isOwner(userId);
      allow update, delete: if isSignedIn() && isOwner(userId) && resource != null;
    }

    /**
     * @description Controls access to badges earned by a user.
     * @path /users/{userId}/userBadges/{userBadgeId}
     * @allow (create) - If the user ID in the path matches the authenticated user's ID.
     * @allow (get, list) - If the user ID in the path matches the authenticated user's ID.
     * @allow (update, delete) - If the user ID in the path matches the authenticated user's ID and the document exists.
     * @deny (create) - If the user ID in the path does not match the authenticated user's ID.
     * @deny (update, delete) - If the user ID in the path does not match the authenticated user's ID or the document does not exist.
     * @principle Enforces document ownership for user badges.
     */
    match /users/{userId}/userBadges/{userBadgeId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
      allow get, list: if isSignedIn() && isOwner(userId);
      allow update, delete: if isSignedIn() && isOwner(userId) && resource != null;
    }

    /**
     * @description Controls access to information about available badges.
     * @path /badges/{badgeId}
     * @allow (get, list) - If true (public read).
     * @allow (create, update, delete) - if false; // TODO: Restrict to admin role
     * @deny (create, update, delete) - Always deny writes.
     * @principle Allows public read access for badges.
     */
    match /badges/{badgeId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Restrict to admin role
    }

    /**
     * @description Controls access to flashcardMastery data for a user.
     * @path /users/{userId}/flashcardMastery
     * @allow (list) - If the user ID in the path matches the authenticated user's ID.
     * @principle Enforces document ownership for flashcardMastery.
     */
    match /users/{userId}/flashcardMastery {
       function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow list: if isSignedIn() && isOwner(userId);
      allow get: if false;
      allow create: if false;
      allow update: if false;
      allow delete: if false;

    }
  }
}