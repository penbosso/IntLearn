/**
 * @fileOverview Firestore Security Rules for the IntLearn platform.
 *
 * Core Philosophy:
 * This ruleset enforces a strict ownership model for user-specific data and an admin-ownership model for course content.
 * Authorization independence is achieved by denormalizing the adminId into course subcollections.
 *
 * Data Structure:
 * - /users/{userId}: User profile data, accessible only by the user and potentially admins.
 * - /courses/{courseId}: Course data, owned by the admin who created it.
 * - /courses/{courseId}/topics/{topicId}: Topics within a course, owned by the course admin.
 * - /courses/{courseId}/topics/{topicId}/flashcards/{flashcardId}: Flashcards within a topic, owned by the course admin.
 * - /courses/{courseId}/topics/{topicId}/questions/{questionId}: Questions within a topic, owned by the course admin.
 * - /courses/{courseId}/topics/{topicId}/quizzes/{quizId}: Quizzes within a topic, owned by the course admin.
 * - /users/{userId}/enrollments/{enrollmentId}: Enrollments for a user, accessible only by the user.
 * - /users/{userId}/quizAttempts/{quizAttemptId}: Quiz attempts for a user, accessible only by the user.
 * - /users/{userId}/performances/{performanceId}: Performance data for a user, accessible only by the user.
 * - /users/{userId}/flashcardMastery/{flashcardId}: Flashcard mastery data for a user, accessible only by the user.
 * - /users/{userId}/userBadges/{userBadgeId}: Badges earned by a user, accessible only by the user.
 * - /badges/{badgeId}: Publicly readable information about available badges.
 *
 * Key Security Decisions:
 * - Users can only access their own data under the /users/{userId} collection.
 * - Course content (topics, flashcards, questions, quizzes) is owned and managed by the admin who created the course.
 * - Listing of user documents is disallowed.
 * - The /badges collection is publicly readable.
 *
 * Denormalization for Authorization:
 * The adminId is denormalized into the topics, flashcards, questions and quizzes subcollections to allow for simpler security rules that do not require expensive get() operations.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is authenticated.
     * @return {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user is the owner of the resource.
     * @param {string} userId - The user ID to compare against the request's authentication UID.
     * @return {boolean} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is the existing owner of the resource.
     * @param {string} userId - The user ID to compare against the resource data's ID.
     * @return {boolean} True if the user is the owner and the resource exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Allows the user to create their own user document.
     * @path /users/{userId}
     * @allow (create) - User with UID 'user_abc' can create /users/user_abc
     * @deny (create) - User with UID 'user_abc' cannot create /users/user_xyz
     * @principle Enforces user-ownership for user profile data.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if false;
    }

    /**
     * @description Manages courses. Only the admin who created the course can modify it.
     * @path /courses/{courseId}
     * @allow (create) - Admin 'admin_abc' can create a course with adminId 'admin_abc'.
     * @deny (update) - User 'user_xyz' cannot update a course created by 'admin_abc'.
     * @principle Enforces admin-ownership for courses.
     */
    match /courses/{courseId} {
      allow get, list: if true;
      allow create: if isSignedIn(); // TODO: Add admin role check.  For now anyone can create a course
      allow update, delete: if false; // TODO: Add admin role and ownership check once roles are implemented.
    }

    /**
     * @description Manages topics within a course. Only the course admin can manage topics.
     * @path /courses/{courseId}/topics/{topicId}
     * @allow (create) - Admin 'admin_abc' can create a topic under a course they own.
     * @deny (update) - User 'user_xyz' cannot update a topic in a course owned by 'admin_abc'.
     * @principle Enforces admin-ownership for topics within courses.
     */
    match /courses/{courseId}/topics/{topicId} {
      allow get, list: if true;
      allow create: if isSignedIn(); // TODO: Add admin role and ownership check once roles are implemented.
      allow update, delete: if false; // TODO: Add admin role and ownership check once roles are implemented.
    }

    /**
     * @description Manages flashcards within a topic. Only the course admin can manage flashcards.
     * @path /courses/{courseId}/topics/{topicId}/flashcards/{flashcardId}
     * @allow (create) - Admin 'admin_abc' can create a flashcard under a topic they own.
     * @deny (update) - User 'user_xyz' cannot update a flashcard in a topic owned by 'admin_abc'.
     * @principle Enforces admin-ownership for flashcards within topics.
     */
    match /courses/{courseId}/topics/{topicId}/flashcards/{flashcardId} {
      allow get, list: if true;
      allow create: if isSignedIn(); // TODO: Add admin role and ownership check once roles are implemented.
      allow update, delete: if false; // TODO: Add admin role and ownership check once roles are implemented.
    }

    /**
     * @description Manages questions within a topic. Only the course admin can manage questions.
     * @path /courses/{courseId}/topics/{topicId}/questions/{questionId}
     * @allow (create) - Admin 'admin_abc' can create a question under a topic they own.
     * @deny (update) - User 'user_xyz' cannot update a question in a topic owned by 'admin_abc'.
     * @principle Enforces admin-ownership for questions within topics.
     */
    match /courses/{courseId}/topics/{topicId}/questions/{questionId} {
      allow get, list: if true;
      allow create: if isSignedIn(); // TODO: Add admin role and ownership check once roles are implemented.
      allow update, delete: if false; // TODO: Add admin role and ownership check once roles are implemented.
    }

    /**
     * @description Manages quizzes within a topic. Only the course admin can manage quizzes.
     * @path /courses/{courseId}/topics/{topicId}/quizzes/{quizId}
     * @allow (create) - Admin 'admin_abc' can create a quiz under a topic they own.
     * @deny (update) - User 'user_xyz' cannot update a quiz in a topic owned by 'admin_abc'.
     * @principle Enforces admin-ownership for quizzes within topics.
     */
    match /courses/{courseId}/topics/{topicId}/quizzes/{quizId} {
      allow get, list: if true;
      allow create: if isSignedIn(); // TODO: Add admin role and ownership check once roles are implemented.
      allow update, delete: if false; // TODO: Add admin role and ownership check once roles are implemented.
    }

    /**
     * @description Manages enrollments for a user. Only the user can manage their enrollments.
     * @path /users/{userId}/enrollments/{enrollmentId}
     * @allow (create) - User 'user_abc' can create an enrollment under their own user ID.
     * @deny (delete) - User 'user_abc' cannot delete an enrollment under another user ID.
     * @principle Enforces user-ownership for enrollments.
     */
    match /users/{userId}/enrollments/{enrollmentId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Manages quiz attempts for a user. Only the user can manage their quiz attempts.
     * @path /users/{userId}/quizAttempts/{quizAttemptId}
     * @allow (create) - User 'user_abc' can create a quiz attempt under their own user ID.
     * @deny (delete) - User 'user_abc' cannot delete a quiz attempt under another user ID.
     * @principle Enforces user-ownership for quiz attempts.
     */
    match /users/{userId}/quizAttempts/{quizAttemptId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Manages performance data for a user. Only the user can manage their performance data.
     * @path /users/{userId}/performances/{performanceId}
     * @allow (create) - User 'user_abc' can create performance data under their own user ID.
     * @deny (delete) - User 'user_abc' cannot delete performance data under another user ID.
     * @principle Enforces user-ownership for performance data.
     */
    match /users/{userId}/performances/{performanceId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Manages flashcard mastery data for a user. Only the user can manage their own flashcard mastery data.
     * @path /users/{userId}/flashcardMastery/{flashcardId}
     * @allow (create) - User 'user_abc' can create flashcard mastery data under their own user ID.
     * @deny (delete) - User 'user_abc' cannot delete flashcard mastery data under another user ID.
     * @principle Enforces user-ownership for flashcard mastery data.
     */
    match /users/{userId}/flashcardMastery/{flashcardId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Manages user badges for a user. Only the user can manage their own badges.
     * @path /users/{userId}/userBadges/{userBadgeId}
     * @allow (create) - User 'user_abc' can create a user badge under their own user ID.
     * @deny (delete) - User 'user_abc' cannot delete a user badge under another user ID.
     * @principle Enforces user-ownership for user badges.
     */
    match /users/{userId}/userBadges/{userBadgeId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Provides public read access to badge information.
     * @path /badges/{badgeId}
     * @allow (get) - Any user can read badge information.
     * @deny (create) - No one can create, update, or delete badges through the client.
     * @principle Allows public read access for badges, with restricted write access.
     */
    match /badges/{badgeId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }
  }
}