/**
 * @fileoverview Firestore Security Rules for the IntLearn platform.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user-specific data and an admin-ownership model for course content.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles. Access is restricted to the user themselves.
 * - /courses/{courseId}: Stores course information.  Owned by the adminId.  The adminId will be copied to subcollections.
 * - /courses/{courseId}/topics/{topicId}: Stores topics for a specific course. Includes denormalized 'adminId' from the parent course for authorization independence.
 * - /courses/{courseId}/topics/{topicId}/flashcards/{flashcardId}: Stores flashcards for a specific topic. Includes denormalized 'adminId' from the parent course for authorization independence.
 * - /courses/{courseId}/topics/{topicId}/questions/{questionId}: Stores questions for a specific topic. Includes denormalized 'adminId' from the parent course for authorization independence.
 * - /courses/{courseId}/topics/{topicId}/quizzes/{quizId}: Stores quizzes for a specific topic. Includes denormalized 'adminId' from the parent course for authorization independence.
 * - /users/{userId}/enrollments/{enrollmentId}: Stores enrollment information. Access is restricted to the user.
 * - /users/{userId}/quizAttempts/{quizAttemptId}: Stores quiz attempts. Access is restricted to the user.
 * - /users/{userId}/performances/{performanceId}: Stores performance data. Access is restricted to the user.
 * - /users/{userId}/userBadges/{userBadgeId}: Stores user badges. Access is restricted to the user.
 * - /badges/{badgeId}: Stores information about available badges. Access is public read only.
 *
 * Key Security Decisions:
 * - User-specific data (enrollments, quiz attempts, performance, badges) uses the /users/{userId} path, clearly establishing ownership and restricting listing to the owner.
 * - Course content is owned by admins, and this ownership is denormalized into the subcollections.
 * - Public listing is only allowed on the /badges/{badgeId} collection because there is no user specific or identifying information stored.
 *
 * Denormalization for Authorization:
 * - Course adminId is denormalized into topics, flashcards, questions, and quizzes to allow for authorization independence and prevent costly get() calls.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is made by a signed-in user.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user ID matches the provided user ID.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is the owner of the existing document.
     * @details Combines the ownership check with the existence check for destructive operations.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Rules for user profiles.
     * @path /users/{userId}
     * @allow (create) User '6psM4D9vcARUuukN95TWgjI2ktp1' can create their own profile if the userId matches their auth UID.
     * @allow (get, update, delete) User '6psM4D9vcARUuukN95TWgjI2ktp1' can read, update, and delete their own profile.
     * @deny (create) User 'SomeoneElse' cannot create a profile with userId '6psM4D9vcARUuukN95TWgjI2ktp1'.
     * @deny (get, update, delete) User 'SomeoneElse' cannot read, update, or delete User '6psM4D9vcARUuukN95TWgjI2ktp1' profile.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false; // Listing users is not permitted.
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for courses.
     * @path /courses/{courseId}
     * @allow (create) Admin can create a course.
     * @allow (get, update, delete) Admin can read, update, and delete their own course.
     * @deny (create) Non-admin cannot create a course.
     * @deny (get, update, delete) Non-admin cannot read, update, or delete the course.
     * @principle Enforces document ownership for all operations.
     */
    match /courses/{courseId} {
      allow get: if true; // TODO: Determine if this should be limited to enrolled users.
      allow list: if true; // TODO: Determine if this should be limited to enrolled users.
      allow create: if isSignedIn(); // TODO: Add admin role check.
      allow update: if isSignedIn(); // TODO: Add admin role check.
      allow delete: if isSignedIn(); // TODO: Add admin role check.
    }

    /**
     * @description Rules for topics within a course.
     * @path /courses/{courseId}/topics/{topicId}
     * @allow (create) Admin of the course can create a topic.
     * @allow (get, update, delete) Admin of the course can read, update, and delete topics within their course.
     * @deny (create) Non-admin cannot create a topic.
     * @deny (get, update, delete) Non-admin cannot read, update, or delete the topic.
     * @principle Enforces document ownership for all operations, inheriting ownership from the course.
     */
    match /courses/{courseId}/topics/{topicId} {
      allow get: if true; // TODO: Determine if this should be limited to enrolled users.
      allow list: if true; // TODO: Determine if this should be limited to enrolled users.
      allow create: if isSignedIn(); // TODO: Add admin role check.
      allow update: if isSignedIn(); // TODO: Add admin role check.
      allow delete: if isSignedIn(); // TODO: Add admin role check.
    }

    /**
     * @description Rules for flashcards within a topic.
     * @path /courses/{courseId}/topics/{topicId}/flashcards/{flashcardId}
     * @allow (create) Admin of the course can create a flashcard.
     * @allow (get, update, delete) Admin of the course can read, update, and delete flashcards within their course.
     * @deny (create) Non-admin cannot create a flashcard.
     * @deny (get, update, delete) Non-admin cannot read, update, or delete the flashcard.
     * @principle Enforces document ownership for all operations, inheriting ownership from the course.
     */
    match /courses/{courseId}/topics/{topicId}/flashcards/{flashcardId} {
      allow get: if true; // TODO: Determine if this should be limited to enrolled users.
      allow list: if true; // TODO: Determine if this should be limited to enrolled users.
      allow create: if isSignedIn(); // TODO: Add admin role check.
      allow update: if isSignedIn(); // TODO: Add admin role check.
      allow delete: if isSignedIn(); // TODO: Add admin role check.
    }

    /**
     * @description Rules for questions within a topic.
     * @path /courses/{courseId}/topics/{topicId}/questions/{questionId}
     * @allow (create) Admin of the course can create a question.
     * @allow (get, update, delete) Admin of the course can read, update, and delete questions within their course.
     * @deny (create) Non-admin cannot create a question.
     * @deny (get, update, delete) Non-admin cannot read, update, or delete the question.
     * @principle Enforces document ownership for all operations, inheriting ownership from the course.
     */
    match /courses/{courseId}/topics/{topicId}/questions/{questionId} {
      allow get: if true; // TODO: Determine if this should be limited to enrolled users.
      allow list: if true; // TODO: Determine if this should be limited to enrolled users.
      allow create: if isSignedIn(); // TODO: Add admin role check.
      allow update: if isSignedIn(); // TODO: Add admin role check.
      allow delete: if isSignedIn(); // TODO: Add admin role check.
    }

    /**
     * @description Rules for quizzes within a topic.
     * @path /courses/{courseId}/topics/{topicId}/quizzes/{quizId}
     * @allow (create) Admin of the course can create a quiz.
     * @allow (get, update, delete) Admin of the course can read, update, and delete quizzes within their course.
     * @deny (create) Non-admin cannot create a quiz.
     * @deny (get, update, delete) Non-admin cannot read, update, or delete the quiz.
     * @principle Enforces document ownership for all operations, inheriting ownership from the course.
     */
    match /courses/{courseId}/topics/{topicId}/quizzes/{quizId} {
      allow get: if true; // TODO: Determine if this should be limited to enrolled users.
      allow list: if true; // TODO: Determine if this should be limited to enrolled users.
      allow create: if isSignedIn(); // TODO: Add admin role check.
      allow update: if isSignedIn(); // TODO: Add admin role check.
      allow delete: if isSignedIn(); // TODO: Add admin role check.
    }

    /**
     * @description Rules for enrollments.
     * @path /users/{userId}/enrollments/{enrollmentId}
     * @allow (create) User can create their own enrollment.
     * @allow (get, update, delete) User can read, update, and delete their own enrollments.
     * @deny (create) User cannot create an enrollment for another user.
     * @deny (get, update, delete) User cannot read, update, or delete another user's enrollments.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/enrollments/{enrollmentId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for quiz attempts.
     * @path /users/{userId}/quizAttempts/{quizAttemptId}
     * @allow (create) User can create their own quiz attempt.
     * @allow (get, update, delete) User can read, update, and delete their own quiz attempts.
     * @deny (create) User cannot create a quiz attempt for another user.
     * @deny (get, update, delete) User cannot read, update, or delete another user's quiz attempts.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/quizAttempts/{quizAttemptId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for performance data.
     * @path /users/{userId}/performances/{performanceId}
     * @allow (create) User can create their own performance data.
     * @allow (get, update, delete) User can read, update, and delete their own performance data.
     * @deny (create) User cannot create performance data for another user.
     * @deny (get, update, delete) User cannot read, update, or delete another user's performance data.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/performances/{performanceId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == userId;
      allow delete: if isExistingOwner(userId);
    }

        /**
     * @description Rules for flashcard mastery data (a type of performance data).
     * @path /users/{userId}/flashcardMastery/{flashcardMasteryId}
     * @allow (create) User can create their own performance data.
     * @allow (get, update, delete) User can read, update, and delete their own performance data.
     * @deny (create) User cannot create performance data for another user.
     * @deny (get, update, delete) User cannot read, update, or delete another user's performance data.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/flashcardMastery/{flashcardMasteryId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for user badges.
     * @path /users/{userId}/userBadges/{userBadgeId}
     * @allow (create) User can create their own user badge.
     * @allow (get, update, delete) User can read, update, and delete their own user badges.
     * @deny (create) User cannot create a user badge for another user.
     * @deny (get, update, delete) User cannot read, update, or delete another user's user badges.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/userBadges/{userBadgeId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for badges.
     * @path /badges/{badgeId}
     * @allow (get, list) Public read access for all badges.
     * @deny (create, update, delete) No one can create, update, or delete badges through the client.
     * @principle Public read access with restricted writes.
     */
    match /badges/{badgeId} {
      allow get, list: if true;
      allow create, update, delete: if false; // Badges should be managed through the admin console, not client-side.
    }
  }
}