/**
 * @fileoverview Firestore Security Rules for the IntLearn platform.
 *
 * Core Philosophy:
 * This ruleset enforces a hybrid security model with owner-only access for user-specific data and shared access for course content managed by admins.
 *
 * Data Structure:
 * - /users/{userId}: User profile information (owner-only access).
 * - /courses/{courseId}: Course information, owned by an admin (adminId).
 * - /courses/{courseId}/topics/{topicId}: Topics within a course, owned by the course admin (denormalized adminId).
 * - /courses/{courseId}/topics/{topicId}/flashcards/{flashcardId}: Flashcards within a topic, owned by the course admin (denormalized adminId).
 * - /courses/{courseId}/topics/{topicId}/questions/{questionId}: Questions within a topic, owned by the course admin (denormalized adminId).
 * - /courses/{courseId}/topics/{topicId}/quizzes/{quizId}: Quizzes within a topic, owned by the course admin (denormalized adminId).
 * - /users/{userId}/enrollments/{enrollmentId}: Enrollments for a user (owner-only access).
 * - /users/{userId}/quizAttempts/{quizAttemptId}: Quiz attempts for a user (owner-only access).
 * - /users/{userId}/performances/{performanceId}: Performance data for a user (owner-only access).
 * - /users/{userId}/userBadges/{userBadgeId}: Badges earned by a user (owner-only access).
 * - /badges/{badgeId}: Information about available badges (public read, admin-only write).
 *
 * Key Security Decisions:
 * - User data is strictly controlled by the user themselves.
 * - Course content is managed by the admin who created the course.  Admin ownership is enforced across all subcollections through denormalization of the adminId.
 * - Listing of user-specific subcollections (enrollments, quizAttempts, etc.) is allowed only to the owning user.
 * - The `badges` collection is publicly readable but only writable by admins.
 *
 * Denormalization for Authorization:
 * - The `adminId` is denormalized from the `/courses/{courseId}` document into all subcollections (`topics`, `flashcards`, `questions`, `quizzes`) to enable efficient security rules without additional `get()` calls.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile information.
     * @path /users/{userId}
     * @allow (create) User with matching ID can create their profile.
     * @allow (get, list, update, delete) User with matching ID can read, update, and delete their profile.
     * @deny (create) User cannot create a profile with a mismatched ID.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to course information.
     * @path /courses/{courseId}
     * @allow (create) User with 'admin' role can create courses.
     * @allow (get, list) Any user can read course information.
     * @allow (update, delete) Only the admin who created the course can update or delete it.
     * @deny (create) Non-admin users cannot create courses.
     * @deny (update, delete) Users who are not the course admin cannot update or delete the course.
     * @principle Enforces role-based access for creation and owner-only access for modifications.
     */
    match /courses/{courseId} {
       function isAdmin() {
            return request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
        }

        function isCourseAdmin(adminId) {
          return request.auth != null && request.auth.uid == adminId;
        }

        function isExistingCourseAdmin(adminId) {
          return isCourseAdmin(adminId) && resource != null;
        }
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isExistingCourseAdmin(resource.data.adminId);
      allow delete: if isExistingCourseAdmin(resource.data.adminId);
    }

    /**
     * @description Controls access to topics within a course.
     * @path /courses/{courseId}/topics/{topicId}
     * @allow (create) Only the admin of the course can create topics.
     * @allow (get, list) Any user can read topics.
     * @allow (update, delete) Only the admin who created the course can update or delete topics.
     * @deny (create) Non-admin users cannot create topics.
     * @deny (update, delete) Users who are not the course admin cannot update or delete topics.
     * @principle Enforces owner-only access based on the denormalized adminId.
     */
    match /courses/{courseId}/topics/{topicId} {
      function isCourseAdmin(adminId) {
        return request.auth != null && request.auth.uid == adminId;
      }

      function isExistingCourseAdmin(adminId) {
        return isCourseAdmin(adminId) && resource != null;
      }

      allow get, list: if true;
      allow create: if isCourseAdmin(get(/databases/$(database)/documents/courses/$(courseId)).data.adminId);
      allow update: if isExistingCourseAdmin(resource.data.adminId);
      allow delete: if isExistingCourseAdmin(resource.data.adminId);
    }

    /**
     * @description Controls access to flashcards within a topic.
     * @path /courses/{courseId}/topics/{topicId}/flashcards/{flashcardId}
     * @allow (create) Only the admin of the course can create flashcards.
     * @allow (get, list) Any user can read flashcards.
     * @allow (update, delete) Only the admin who created the course can update or delete flashcards.
     * @deny (create) Non-admin users cannot create flashcards.
     * @deny (update, delete) Users who are not the course admin cannot update or delete flashcards.
     * @principle Enforces owner-only access based on the denormalized adminId.
     */
    match /courses/{courseId}/topics/{topicId}/flashcards/{flashcardId} {
     function isCourseAdmin(adminId) {
        return request.auth != null && request.auth.uid == adminId;
      }

      function isExistingCourseAdmin(adminId) {
        return isCourseAdmin(adminId) && resource != null;
      }

      allow get, list: if true;
      allow create: if isCourseAdmin(get(/databases/$(database)/documents/courses/$(courseId)).data.adminId);
      allow update: if isExistingCourseAdmin(resource.data.adminId);
      allow delete: if isExistingCourseAdmin(resource.data.adminId);
    }

    /**
     * @description Controls access to questions within a topic.
     * @path /courses/{courseId}/topics/{topicId}/questions/{questionId}
     * @allow (create) Only the admin of the course can create questions.
     * @allow (get, list) Any user can read questions.
     * @allow (update, delete) Only the admin who created the course can update or delete questions.
     * @deny (create) Non-admin users cannot create questions.
     * @deny (update, delete) Users who are not the course admin can update or delete questions.
     * @principle Enforces owner-only access based on the denormalized adminId.
     */
    match /courses/{courseId}/topics/{topicId}/questions/{questionId} {
      function isCourseAdmin(adminId) {
        return request.auth != null && request.auth.uid == adminId;
      }

      function isExistingCourseAdmin(adminId) {
        return isCourseAdmin(adminId) && resource != null;
      }

      allow get, list: if true;
      allow create: if isCourseAdmin(get(/databases/$(database)/documents/courses/$(courseId)).data.adminId);
      allow update: if isExistingCourseAdmin(resource.data.adminId);
      allow delete: if isExistingCourseAdmin(resource.data.adminId);
    }

    /**
     * @description Controls access to quizzes within a topic.
     * @path /courses/{courseId}/topics/{topicId}/quizzes/{quizId}
     * @allow (create) Only the admin of the course can create quizzes.
     * @allow (get, list) Any user can read quizzes.
     * @allow (update, delete) Only the admin who created the course can update or delete quizzes.
     * @deny (create) Non-admin users cannot create quizzes.
     * @deny (update, delete) Users who are not the course admin can update or delete quizzes.
     * @principle Enforces owner-only access based on the denormalized adminId.
     */
    match /courses/{courseId}/topics/{topicId}/quizzes/{quizId} {
    function isCourseAdmin(adminId) {
        return request.auth != null && request.auth.uid == adminId;
      }

      function isExistingCourseAdmin(adminId) {
        return isCourseAdmin(adminId) && resource != null;
      }

      allow get, list: if true;
      allow create: if isCourseAdmin(get(/databases/$(database)/documents/courses/$(courseId)).data.adminId);
      allow update: if isExistingCourseAdmin(resource.data.adminId);
      allow delete: if isExistingCourseAdmin(resource.data.adminId);
    }

    /**
     * @description Controls access to a user's enrollments.
     * @path /users/{userId}/enrollments/{enrollmentId}
     * @allow (get, list) User with matching ID can read their enrollments.
     * @allow (create) User with matching ID can create enrollments.
     * @allow (update, delete) User with matching ID can update and delete their enrollments.
     * @deny (create) User cannot create an enrollment with a mismatched ID.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/enrollments/{enrollmentId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to a user's quiz attempts.
     * @path /users/{userId}/quizAttempts/{quizAttemptId}
     * @allow (get, list) User with matching ID can read their quiz attempts.
     * @allow (create) User with matching ID can create quiz attempts.
     * @allow (update, delete) User with matching ID can update and delete their quiz attempts.
     * @deny (create) User cannot create a quiz attempt with a mismatched ID.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/quizAttempts/{quizAttemptId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to a user's performance data.
     * @path /users/{userId}/performances/{performanceId}
     * @allow (get, list) User with matching ID can read their performance data.
     * @allow (create) User with matching ID can create performance data.
     * @allow (update, delete) User with matching ID can update and delete their performance data.
     * @deny (create) User cannot create performance data with a mismatched ID.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/performances/{performanceId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to badges earned by a user.
     * @path /users/{userId}/userBadges/{userBadgeId}
     * @allow (get, list) User with matching ID can read their badges.
     * @allow (create) User with matching ID can create badges.
     * @allow (update, delete) User with matching ID can update and delete their badges.
     * @deny (create) User cannot create a badge with a mismatched ID.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/userBadges/{userBadgeId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to information about available badges.
     * @path /badges/{badgeId}
     * @allow (get, list) Any user can read badge information.
     * @allow (create, update, delete) Only admins can create, update, or delete badges.
     * @deny (create, update, delete) Non-admin users cannot modify badge information.
     * @principle Enforces public read access with admin-only write access.
     */
    match /badges/{badgeId} {
        function isAdmin() {
            return request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
        }
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }
  }
}