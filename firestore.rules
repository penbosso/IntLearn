/**
 * @file Firestore Security Rules for IntLearn Platform
 * @description This ruleset enforces a strict user-ownership model for user-specific data
 * and an admin-ownership model for course content. It uses path-based authorization and
 * denormalization to ensure efficient and secure access control.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles. Only the user or an admin can access.
 * - /courses/{courseId}: Stores course information. Owned by adminId.
 * - /courses/{courseId}/topics/{topicId}: Stores topics. Includes denormalized adminId.
 * - /courses/{courseId}/topics/{topicId}/flashcards/{flashcardId}: Stores flashcards. Includes denormalized adminId.
 * - /courses/{courseId}/topics/{topicId}/questions/{questionId}: Stores questions. Includes denormalized adminId.
 * - /courses/{courseId}/topics/{topicId}/quizzes/{quizId}: Stores quizzes. Includes denormalized adminId.
 * - /users/{userId}/enrollments/{enrollmentId}: Stores enrollment data. Only the user can access.
 * - /users/{userId}/quizAttempts/{quizAttemptId}: Stores quiz attempts. Only the user can access.
 * - /users/{userId}/performances/{performanceId}: Stores performance data. Only the user can access.
 * - /users/{userId}/userBadges/{userBadgeId}: Stores user badges. Only the user can access.
 * - /badges/{badgeId}: Stores information about available badges.
 *
 * Key Security Decisions:
 * - Users cannot list all users in the /users collection.
 * - Ownership of courses is determined by the adminId field.
 * - Subcollections under courses inherit the adminId for authorization.
 * - Data validation is limited to relational integrity and ownership.
 * - Students are blocked from accessing performance page.
 *
 * Denormalization for Authorization:
 * - The adminId is copied from the /courses/{courseId} document to all documents in its subcollections
 *   (topics, flashcards, questions, quizzes) to avoid using get() calls in the rules.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is made by a signed-in user.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user ID matches the provided user ID.
     * @param {string} userId - The user ID to compare against.
     * @return {bool} True if the user is signed in and the UID matches; false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is the existing owner of the document.
     * @param {string} userId - The user ID to compare against the document's owner.
     * @return {bool} True if the user is the owner and the resource exists.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Enforces access control for user profiles.
     * @path /users/{userId}
     * @allow (create) - A user can create their own profile if the userId matches their auth.uid.
     * @allow (get) - A user can read their own profile.
     * @allow (update) - A user can update their own profile.
     * @allow (delete) - A user can delete their own profile.
     * @deny (list) - Users cannot list all user profiles.
     * @deny (create) - A user cannot create a profile for another user.
     * @deny (update) - A user cannot update another user's profile.
     * @deny (delete) - A user cannot delete another user's profile.
     * @principle Enforces document ownership for writes and prevents listing user profiles.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces access control for courses.
     * @path /courses/{courseId}
     * @allow (create) - An admin can create a course.
     * @allow (get, list) - Anyone can read courses.
     * @allow (update) - Only the admin who created the course can update it.
     * @allow (delete) - Only the admin who created the course can delete it.
     * @principle Enforces owner-only writes for courses, public reads.
     */
    match /courses/{courseId} {
      allow get, list: if true;
      allow create: if isSignedIn(); // TODO: Add admin role check if needed.
      allow update: if isSignedIn() && resource.data.adminId == request.auth.uid; // Assuming adminId exists in document
      allow delete: if isSignedIn() && resource.data.adminId == request.auth.uid; // Assuming adminId exists in document
    }

    /**
     * @description Enforces access control for topics within a course.
     * @path /courses/{courseId}/topics/{topicId}
     * @allow (create) - An admin can create a topic within a course.
     * @allow (get, list) - Anyone can read topics.
     * @allow (update) - Only the admin who created the course can update the topic.
     * @allow (delete) - Only the admin who created the course can delete the topic.
     * @principle Enforces owner-only writes for topics, public reads.
     */
    match /courses/{courseId}/topics/{topicId} {
      allow get, list: if true;
      allow create: if isSignedIn() && get(/databases/$(database)/documents/courses/$(courseId)).data.adminId == request.auth.uid; //Check adminId from course
      allow update: if isSignedIn() && resource.data.adminId == request.auth.uid; // Assuming adminId exists in topic document
      allow delete: if isSignedIn() && resource.data.adminId == request.auth.uid; // Assuming adminId exists in topic document
    }

    /**
     * @description Enforces access control for flashcards within a topic.
     * @path /courses/{courseId}/topics/{topicId}/flashcards/{flashcardId}
     * @allow (create) - An admin can create a flashcard within a topic.
     * @allow (get, list) - Anyone can read flashcards.
     * @allow (update) - Only the admin who created the course can update the flashcard.
     * @allow (delete) - Only the admin who created the course can delete the flashcard.
     * @principle Enforces owner-only writes for flashcards, public reads.
     */
    match /courses/{courseId}/topics/{topicId}/flashcards/{flashcardId} {
      allow get, list: if true;
      allow create: if isSignedIn() && get(/databases/$(database)/documents/courses/$(courseId)).data.adminId == request.auth.uid; //Check adminId from course
      allow update: if isSignedIn() && resource.data.adminId == request.auth.uid; // Assuming adminId exists in flashcard document
      allow delete: if isSignedIn() && resource.data.adminId == request.auth.uid; // Assuming adminId exists in flashcard document
    }

    /**
     * @description Enforces access control for questions within a topic.
     * @path /courses/{courseId}/topics/{topicId}/questions/{questionId}
     * @allow (create) - An admin can create a question within a topic.
     * @allow (get, list) - Anyone can read questions.
     * @allow (update) - Only the admin who created the course can update the question.
     * @allow (delete) - Only the admin who created the course can delete the question.
     * @principle Enforces owner-only writes for questions, public reads.
     */
    match /courses/{courseId}/topics/{topicId}/questions/{questionId} {
      allow get, list: if true;
      allow create: if isSignedIn() && get(/databases/$(database)/documents/courses/$(courseId)).data.adminId == request.auth.uid; //Check adminId from course
      allow update: if isSignedIn() && resource.data.adminId == request.auth.uid; // Assuming adminId exists in question document
      allow delete: if isSignedIn() && resource.data.adminId == request.auth.uid; // Assuming adminId exists in question document
    }

    /**
     * @description Enforces access control for quizzes within a topic.
     * @path /courses/{courseId}/topics/{topicId}/quizzes/{quizId}
     * @allow (create) - An admin can create a quiz within a topic.
     * @allow (get, list) - Anyone can read quizzes.
     * @allow (update) - Only the admin who created the course can update the quiz.
     * @allow (delete) - Only the admin who created the course can delete the quiz.
     * @principle Enforces owner-only writes for quizzes, public reads.
     */
    match /courses/{courseId}/topics/{topicId}/quizzes/{quizId} {
      allow get, list: if true;
      allow create: if isSignedIn() && get(/databases/$(database)/documents/courses/$(courseId)).data.adminId == request.auth.uid; //Check adminId from course
      allow update: if isSignedIn() && resource.data.adminId == request.auth.uid; // Assuming adminId exists in quiz document
      allow delete: if isSignedIn() && resource.data.adminId == request.auth.uid; // Assuming adminId exists in quiz document
    }

    /**
     * @description Enforces access control for enrollments.
     * @path /users/{userId}/enrollments/{enrollmentId}
     * @allow (create) - A user can create an enrollment for themselves.
     * @allow (get, list) - A user can read their own enrollments.
     * @allow (update) - A user can update their own enrollments.
     * @allow (delete) - A user can delete their own enrollments.
     * @deny (create) - A user cannot create an enrollment for another user.
     * @deny (update) - A user cannot update another user's enrollment.
     * @deny (delete) - A user cannot delete another user's enrollment.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/enrollments/{enrollmentId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces access control for quiz attempts.
     * @path /users/{userId}/quizAttempts/{quizAttemptId}
     * @allow (create) - A user can create a quiz attempt for themselves.
     * @allow (get, list) - A user can read their own quiz attempts.
     * @allow (update) - A user can update their own quiz attempts.
     * @allow (delete) - A user can delete their own quiz attempts.
     * @deny (create) - A user cannot create a quiz attempt for another user.
     * @deny (update) - A user cannot update another user's quiz attempt.
     * @deny (delete) - A user cannot delete another user's quiz attempt.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/quizAttempts/{quizAttemptId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces access control for performance data.
     * @path /users/{userId}/performances/{performanceId}
     * @allow (create) - A user can create performance data for themselves.
     * @allow (get, list) - A user can read their own performance data.
     * @allow (update) - A user can update their own performance data.
     * @allow (delete) - A user can delete their own performance data.
     * @deny (create) - A user cannot create performance data for another user.
     * @deny (update) - A user cannot update another user's performance data.
     * @deny (delete) - A user cannot delete another user's performance data.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/performances/{performanceId} {
      allow get: if isOwner(userId) == false;
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces access control for user badges.
     * @path /users/{userId}/userBadges/{userBadgeId}
     * @allow (create) - A user can create a user badge for themselves.
     * @allow (get, list) - A user can read their own user badges.
     * @allow (update) - A user can update their own user badges.
     * @allow (delete) - A user can delete their own user badges.
     * @deny (create) - A user cannot create a user badge for another user.
     * @deny (update) - A user cannot update another user's user badge.
     * @deny (delete) - A user cannot delete another user's user badge.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/userBadges/{userBadgeId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces access control for badges.
     * @path /badges/{badgeId}
     * @allow (get, list) - Anyone can read badges.
     * @deny (create, update, delete) - Only admins can manage badges.
     * @principle Public read, admin-only writes.
     */
    match /badges/{badgeId} {
      allow get, list: if true;
      allow create: if false; // TODO: Add admin role check if needed.
      allow update: if false; // TODO: Add admin role check if needed.
      allow delete: if false; // TODO: Add admin role check if needed.
    }
  }
}