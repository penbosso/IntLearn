/**
 * @file Firestore Security Rules for IntLearn Platform
 * @version Prototyping
 *
 * @description
 * This ruleset enforces a strict user-ownership model for user-specific data
 * and an admin-ownership model for course content. Data validation is minimal to
 * allow for rapid prototyping and schema iteration.
 *
 * @data_structure
 * - /users/{userId}: Stores user profiles, accessible only by the user.
 * - /courses/{courseId}: Stores course data, owned by the admin who created the course.
 * - /courses/{courseId}/topics/{topicId}: Stores topics within a course, also owned by the course admin.
 * - /courses/{courseId}/topics/{topicId}/flashcards/{flashcardId}: Flashcards within a topic, owned by the course admin.
 * - /courses/{courseId}/topics/{topicId}/questions/{questionId}: Questions within a topic, owned by the course admin.
 * - /courses/{courseId}/topics/{topicId}/quizzes/{quizId}: Quizzes within a topic, owned by the course admin.
 * - /users/{userId}/enrollments/{enrollmentId}: Stores user enrollments, accessible only by the user.
 * - /users/{userId}/quizAttempts/{quizAttemptId}: Stores quiz attempts, accessible only by the user.
 * - /users/{userId}/performances/{performanceId}: Stores performance data, accessible only by the user.
 * - /users/{userId}/userBadges/{userBadgeId}: Stores user badges, accessible only by the user.
 * - /badges/{badgeId}: Stores badge definitions. Read access is public, but write access is restricted to authorized users (e.g., admins - not yet implemented).
 *
 * @key_security_decisions
 * - User data is strictly controlled by the user's ID in the path.
 * - Course data is controlled by the adminId field within the course document.  This adminId is copied to all subcollections to maintain authorization independence.
 * - Listing of users is disallowed.
 * - Data validation is minimized in this prototyping phase. Only authorization-critical fields are validated.
 *
 * @denormalization_for_authorization
 * - The `adminId` field is denormalized from the `/courses/{courseId}` document into its subcollections (`topics`, `flashcards`, `questions`, `quizzes`). This avoids the need for costly `get()` operations in security rules when accessing these subcollections.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is made by a signed-in user.
     * @return {bool} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user's UID matches the provided userId.
     * @param {string} userId - The user ID to compare against the authenticated user's UID.
     * @return {bool} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is the owner of the existing document.
     * @param {string} userId - The user ID to compare against the authenticated user's UID.
     * @return {bool} True if the user is the owner and the document exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description
     * Security rules for user profiles.
     *
     * @path /users/{userId}
     * @allow (create) - Authenticated user can create their own profile.
     * @allow (get, update, delete) - Authenticated user can access and modify their own profile.
     * @deny (create) - Unauthorized user attempts to create a profile for another user.
     * @deny (update, delete) - Unauthorized user attempts to modify/delete another user's profile.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description
     * Security rules for courses.
     *
     * @path /courses/{courseId}
     * @allow (get, list) - Public read access.
     * @allow (create) - Only the course admin can create courses.
     * @allow (update, delete) - Only the course admin can modify/delete courses.
     * @deny (create) - User attempts to create a course without being the admin.
     * @deny (update, delete) - User attempts to modify/delete a course without being the admin.
     * @principle Enforces owner-only writes for courses.
     */
    match /courses/{courseId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.adminId == request.auth.uid;
      allow update: if isSignedIn() && resource != null && resource.data.adminId == request.auth.uid;
      allow delete: if isSignedIn() && resource != null && resource.data.adminId == request.auth.uid;
    }

    /**
     * @description
     * Security rules for topics within a course.
     *
     * @path /courses/{courseId}/topics/{topicId}
     * @allow (get, list) - Public read access.
     * @allow (create) - Only the course admin can create topics.
     * @allow (update, delete) - Only the course admin can modify/delete topics.
     * @deny (create) - User attempts to create a topic without being the admin.
     * @deny (update, delete) - User attempts to modify/delete a topic without being the admin.
     * @principle Enforces owner-only writes for topics.
     */
    match /courses/{courseId}/topics/{topicId} {
      allow get, list: if true;
      allow create: if isSignedIn() && get(/databases/$(database)/documents/courses/$(courseId)).data.adminId == request.auth.uid;
      allow update: if isSignedIn() && resource != null && get(/databases/$(database)/documents/courses/$(courseId)).data.adminId == request.auth.uid;
      allow delete: if isSignedIn() && resource != null && get(/databases/$(database)/documents/courses/$(courseId)).data.adminId == request.auth.uid;
    }

    /**
     * @description
     * Security rules for flashcards within a topic.
     *
     * @path /courses/{courseId}/topics/{topicId}/flashcards/{flashcardId}
     * @allow (get, list) - Public read access.
     * @allow (create) - Only the course admin can create flashcards.
     * @allow (update, delete) - Only the course admin can modify/delete flashcards.
     * @deny (create) - User attempts to create a flashcard without being the admin.
     * @deny (update, delete) - User attempts to modify/delete a flashcard without being the admin.
     * @principle Enforces owner-only writes for flashcards.
     */
    match /courses/{courseId}/topics/{topicId}/flashcards/{flashcardId} {
      allow get, list: if true;
      allow create: if isSignedIn() && get(/databases/$(database)/documents/courses/$(courseId)).data.adminId == request.auth.uid;
      allow update: if isSignedIn() && resource != null && get(/databases/$(database)/documents/courses/$(courseId)).data.adminId == request.auth.uid;
      allow delete: if isSignedIn() && resource != null && get(/databases/$(database)/documents/courses/$(courseId)).data.adminId == request.auth.uid;
    }

    /**
     * @description
     * Security rules for questions within a topic.
     *
     * @path /courses/{courseId}/topics/{topicId}/questions/{questionId}
     * @allow (get, list) - Public read access.
     * @allow (create) - Only the course admin can create questions.
     * @allow (update, delete) - Only the course admin can modify/delete questions.
     * @deny (create) - User attempts to create a question without being the admin.
     * @deny (update, delete) - User attempts to modify/delete a question without being the admin.
     * @principle Enforces owner-only writes for questions.
     */
    match /courses/{courseId}/topics/{topicId}/questions/{questionId} {
      allow get, list: if true;
      allow create: if isSignedIn() && get(/databases/$(database)/documents/courses/$(courseId)).data.adminId == request.auth.uid;
      allow update: if isSignedIn() && resource != null && get(/databases/$(database)/documents/courses/$(courseId)).data.adminId == request.auth.uid;
      allow delete: if isSignedIn() && resource != null && get(/databases/$(database)/documents/courses/$(courseId)).data.adminId == request.auth.uid;
    }

    /**
     * @description
     * Security rules for quizzes within a topic.
     *
     * @path /courses/{courseId}/topics/{topicId}/quizzes/{quizId}
     * @allow (get, list) - Public read access.
     * @allow (create) - Only the course admin can create quizzes.
     * @allow (update, delete) - Only the course admin can modify/delete quizzes.
     * @deny (create) - User attempts to create a quiz without being the admin.
     * @deny (update, delete) - User attempts to modify/delete a quiz without being the admin.
     * @principle Enforces owner-only writes for quizzes.
     */
    match /courses/{courseId}/topics/{topicId}/quizzes/{quizId} {
      allow get, list: if true;
      allow create: if isSignedIn() && get(/databases/$(database)/documents/courses/$(courseId)).data.adminId == request.auth.uid;
      allow update: if isSignedIn() && resource != null && get(/databases/$(database)/documents/courses/$(courseId)).data.adminId == request.auth.uid;
      allow delete: if isSignedIn() && resource != null && get(/databases/$(database)/documents/courses/$(courseId)).data.adminId == request.auth.uid;
    }

    /**
     * @description
     * Security rules for enrollments.
     *
     * @path /users/{userId}/enrollments/{enrollmentId}
     * @allow (get, list) - Authenticated user can access their own enrollments.
     * @allow (create) - Authenticated user can create their own enrollments.
     * @allow (update, delete) - Authenticated user can modify/delete their own enrollments.
     * @deny (create) - Unauthorized user attempts to create an enrollment for another user.
     * @deny (update, delete) - Unauthorized user attempts to modify/delete another user's enrollment.
     * @principle Enforces document ownership for enrollments.
     */
    match /users/{userId}/enrollments/{enrollmentId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description
     * Security rules for quiz attempts.
     *
     * @path /users/{userId}/quizAttempts/{quizAttemptId}
     * @allow (get, list) - Authenticated user can access their own quiz attempts.
     * @allow (create) - Authenticated user can create their own quiz attempts.
     * @allow (update, delete) - Authenticated user can modify/delete their own quiz attempts.
     * @deny (create) - Unauthorized user attempts to create a quiz attempt for another user.
     * @deny (update, delete) - Unauthorized user attempts to modify/delete another user's quiz attempt.
     * @principle Enforces document ownership for quiz attempts.
     */
    match /users/{userId}/quizAttempts/{quizAttemptId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description
     * Security rules for performance data.
     *
     * @path /users/{userId}/performances/{performanceId}
     * @allow (get, list) - Authenticated user can access their own performance data.
     * @allow (create) - Authenticated user can create their own performance data.
     * @allow (update, delete) - Authenticated user can modify/delete their own performance data.
     * @deny (create) - Unauthorized user attempts to create performance data for another user.
     * @deny (update, delete) - Unauthorized user attempts to modify/delete another user's performance data.
     * @principle Enforces document ownership for performance data.
     */
    match /users/{userId}/performances/{performanceId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description
     * Security rules for user badges.
     *
     * @path /users/{userId}/userBadges/{userBadgeId}
     * @allow (get, list) - Authenticated user can access their own badges.
     * @allow (create) - Authenticated user can create their own badges.
     * @allow (update, delete) - Authenticated user can modify/delete their own badges.
     * @deny (create) - Unauthorized user attempts to create a badge for another user.
     * @deny (update, delete) - Unauthorized user attempts to modify/delete another user's badge.
     * @principle Enforces document ownership for user badges.
     */
    match /users/{userId}/userBadges/{userBadgeId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description
     * Security rules for badges.
     *
     * @path /badges/{badgeId}
     * @allow (get, list) - Public read access.
     * @deny (create, update, delete) - No public write access.
     * @principle Public read access with restricted writes.
     */
    match /badges/{badgeId} {
      allow get, list: if true;
      allow create: if false; // TODO: Add admin role check when implemented
      allow update: if false; // TODO: Add admin role check when implemented
      allow delete: if false; // TODO: Add admin role check when implemented
    }
  }
}