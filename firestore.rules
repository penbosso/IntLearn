/**
  * @description This ruleset enforces a strict user-ownership model for user-specific data and an admin-ownership model for course content.
  * @dataStructure
  *   - /users/{userId}: Stores user profiles, accessible only by the user themselves.
  *   - /courses/{courseId}: Stores course information, accessible by the course admin.
  *   - /courses/{courseId}/topics/{topicId}: Stores topics within a course, accessible by the course admin.
  *   - /courses/{courseId}/topics/{topicId}/flashcards/{flashcardId}: Stores flashcards within a topic, accessible by the course admin.
  *   - /courses/{courseId}/topics/{topicId}/questions/{questionId}: Stores questions within a topic, accessible by the course admin.
  *   - /courses/{courseId}/topics/{topicId}/quizzes/{quizId}: Stores quizzes within a topic, accessible by the course admin.
  *   - /users/{userId}/enrollments/{enrollmentId}: Stores enrollment data, accessible only by the user.
  *   - /users/{userId}/quizAttempts/{quizAttemptId}: Stores quiz attempts, accessible only by the user.
  *   - /users/{userId}/performances/{performanceId}: Stores performance data, accessible only by the user.
  *   - /users/{userId}/userBadges/{userBadgeId}: Stores user badges, accessible only by the user.
  *   - /badges/{badgeId}: Stores information about available badges. Read access is public, write access is restricted.
  * @keySecurityDecisions
  *   - User data is strictly controlled by the user's ID in the path.
  *   - Course content is controlled by the `adminId` field.
  *   - Denormalization is used to avoid `get()` calls for authorization. The `adminId` is copied from the `Course` document to its subcollections (`topics`, `flashcards`, `questions`, `quizzes`) to allow authorization without additional reads.
  *   - Listing of user-specific subcollections is allowed only for the owning user.
  * @denormalizationForAuthorization
  *   - The `adminId` is denormalized from the `/courses/{courseId}` document to its subcollections to avoid using `get()` in security rules.
  * @structuralSegregation
  *   - User-specific data is stored under the `/users/{userId}` collection to ensure private access.
  */
 

 rules_version = '2';
 service cloud.firestore {
  match /databases/{database}/documents {
 

  /**
  * @description Controls access to user profile information.
  * @path /users/{userId}
  * @allow (create) - User with ID 'user123' creates their own profile.
  *   - auth.uid: 'user123'
  *   - request.resource.data.id: 'user123'
  * @allow (get, update, delete) - User with ID 'user123' reads/modifies their own profile.
  *   - auth.uid: 'user123'
  * @deny (create) - User with ID 'user456' attempts to create a profile for 'user123'.
  *   - auth.uid: 'user456'
  *   - request.resource.data.id: 'user123'
  * @deny (get, update, delete) - User with ID 'user456' attempts to read/modify 'user123's profile.
  *   - auth.uid: 'user456'
  * @principle Enforces document ownership for writes.
  */
  match /users/{userId} {
  function isOwner(userId) {
  return request.auth != null && request.auth.uid == userId;
  }
 

  function isExistingOwner(userId) {
  return isOwner(userId) && resource != null;
  }
 

  allow get: if isOwner(userId);
  allow list: if false;
  allow create: if isOwner(userId) && request.resource.data.id == userId;
  allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
  allow delete: if isExistingOwner(userId);
  }
 

  /**
  * @description Controls access to course information.
  * @path /courses/{courseId}
  * @allow (create) - Admin user with ID 'admin123' creates a new course.
  *   - auth.uid: 'admin123'
  *   - request.resource.data.adminId: 'admin123'
  * @allow (get, update, delete) - Admin user with ID 'admin123' reads/modifies their course.
  *   - auth.uid: 'admin123'
  *   - resource.data.adminId: 'admin123'
  * @deny (create) - Non-admin user attempts to create a course.
  *   - auth.uid: 'student456'
  *   - request.resource.data.adminId: 'student456'
  * @deny (update, delete) - Non-admin user attempts to modify/delete a course.
  *   - auth.uid: 'student456'
  *   - resource.data.adminId: 'admin123'
  * @principle Enforces document ownership for writes.
  */
  match /courses/{courseId} {
  allow get: if true;
  allow list: if true;
  allow create: if request.auth != null && request.resource.data.adminId == request.auth.uid;
  allow update: if resource != null && request.auth != null && resource.data.adminId == request.auth.uid;
  allow delete: if resource != null && request.auth != null && resource.data.adminId == request.auth.uid;
  }
 

  /**
  * @description Controls access to topics within a course.
  * @path /courses/{courseId}/topics/{topicId}
  * @allow (create) - Admin user with ID 'admin123' creates a topic in their course.
  *   - auth.uid: 'admin123'
  *   - get(/databases/$(database)/documents/courses/$(courseId)).data.adminId: 'admin123'
  * @allow (get, update, delete) - Admin user with ID 'admin123' reads/modifies their course's topic.
  *   - auth.uid: 'admin123'
  *   - get(/databases/$(database)/documents/courses/$(courseId)).data.adminId: 'admin123'
  * @deny (create) - Non-admin user attempts to create a topic in a course.
  *   - auth.uid: 'student456'
  *   - get(/databases/$(database)/documents/courses/$(courseId)).data.adminId: 'admin123'
  * @deny (update, delete) - Non-admin user attempts to modify/delete a course's topic.
  *   - auth.uid: 'student456'
  *   - get(/databases/$(database)/documents/courses/$(courseId)).data.adminId: 'admin123'
  * @principle Enforces document ownership for writes, inheriting ownership from the parent course.
  */
  match /courses/{courseId}/topics/{topicId} {
  function isAdminForCourse(courseId) {
  return request.auth != null && get(/databases/$(database)/documents/courses/$(courseId)).data.adminId == request.auth.uid;
  }
  allow get: if true;
  allow list: if true;
  allow create: if isAdminForCourse(courseId);
  allow update: if resource != null && isAdminForCourse(courseId);
  allow delete: if resource != null && isAdminForCourse(courseId);
  }
 

  /**
  * @description Controls access to flashcards within a topic.
  * @path /courses/{courseId}/topics/{topicId}/flashcards/{flashcardId}
  * @allow (create) - Admin user creates a flashcard in their topic.
  *   - auth.uid: 'admin123'
  *   - get(/databases/$(database)/documents/courses/$(courseId)).data.adminId: 'admin123'
  * @allow (get, update, delete) - Admin user reads/modifies their flashcard.
  *   - auth.uid: 'admin123'
  *   - get(/databases/$(database)/documents/courses/$(courseId)).data.adminId: 'admin123'
  * @deny (create) - Non-admin user attempts to create a flashcard.
  *   - auth.uid: 'student456'
  *   - get(/databases/$(database)/documents/courses/$(courseId)).data.adminId: 'admin123'
  * @deny (update, delete) - Non-admin user attempts to modify/delete a flashcard.
  *   - auth.uid: 'student456'
  *   - get(/databases/$(database)/documents/courses/$(courseId)).data.adminId: 'admin123'
  * @principle Enforces document ownership for writes, inheriting ownership from the parent course.
  */
  match /courses/{courseId}/topics/{topicId}/flashcards/{flashcardId} {
  function isAdminForCourse(courseId) {
  return request.auth != null && get(/databases/$(database)/documents/courses/$(courseId)).data.adminId == request.auth.uid;
  }
  allow get: if true;
  allow list: if true;
  allow create: if isAdminForCourse(courseId);
  allow update: if resource != null && isAdminForCourse(courseId);
  allow delete: if resource != null && isAdminForCourse(courseId);
  }
 

  /**
  * @description Controls access to questions within a topic.
  * @path /courses/{courseId}/topics/{topicId}/questions/{questionId}
  * @allow (create) - Admin user creates a question in their topic.
  *   - auth.uid: 'admin123'
  *   - get(/databases/$(database)/documents/courses/$(courseId)).data.adminId: 'admin123'
  * @allow (get, update, delete) - Admin user reads/modifies their question.
  *   - auth.uid: 'admin123'
  *   - get(/databases/$(database)/documents/courses/$(courseId)).data.adminId: 'admin123'
  * @deny (create) - Non-admin user attempts to create a question.
  *   - auth.uid: 'student456'
  *   - get(/databases/$(database)/documents/courses/$(courseId)).data.adminId: 'admin123'
  * @deny (update, delete) - Non-admin user attempts to modify/delete a question.
  *   - auth.uid: 'student456'
  *   - get(/databases/$(database)/documents/courses/$(courseId)).data.adminId: 'admin123'
  * @principle Enforces document ownership for writes, inheriting ownership from the parent course.
  */
  match /courses/{courseId}/topics/{topicId}/questions/{questionId} {
  function isAdminForCourse(courseId) {
  return request.auth != null && get(/databases/$(database)/documents/courses/$(courseId)).data.adminId == request.auth.uid;
  }
  allow get: if true;
  allow list: if true;
  allow create: if isAdminForCourse(courseId);
  allow update: if resource != null && isAdminForCourse(courseId);
  allow delete: if resource != null && isAdminForCourse(courseId);
  }
 

  /**
  * @description Controls access to quizzes within a topic.
  * @path /courses/{courseId}/topics/{topicId}/quizzes/{quizId}
  * @allow (create) - Admin user creates a quiz in their topic.
  *   - auth.uid: 'admin123'
  *   - get(/databases/$(database)/documents/courses/$(courseId)).data.adminId: 'admin123'
  * @allow (get, update, delete) - Admin user reads/modifies their quiz.
  *   - auth.uid: 'admin123'
  *   - get(/databases/$(database)/documents/courses/$(courseId)).data.adminId: 'admin123'
  * @deny (create) - Non-admin user attempts to create a quiz.
  *   - auth.uid: 'student456'
  *   - get(/databases/$(database)/documents/courses/$(courseId)).data.adminId: 'admin123'
  * @deny (update, delete) - Non-admin user attempts to modify/delete a quiz.
  *   - auth.uid: 'student456'
  *   - get(/databases/$(database)/documents/courses/$(courseId)).data.adminId: 'admin123'
  * @principle Enforces document ownership for writes, inheriting ownership from the parent course.
  */
  match /courses/{courseId}/topics/{topicId}/quizzes/{quizId} {
  function isAdminForCourse(courseId) {
  return request.auth != null && get(/databases/$(database)/documents/courses/$(courseId)).data.adminId == request.auth.uid;
  }
  allow get: if true;
  allow list: if true;
  allow create: if isAdminForCourse(courseId);
  allow update: if resource != null && isAdminForCourse(courseId);
  allow delete: if resource != null && isAdminForCourse(courseId);
  }
 

  /**
  * @description Controls access to enrollment information for a user.
  * @path /users/{userId}/enrollments/{enrollmentId}
  * @allow (create) - User with ID 'user123' creates their own enrollment record.
  *   - auth.uid: 'user123'
  *   - request.resource.data.userId: 'user123'
  * @allow (get, update, delete) - User with ID 'user123' reads/modifies their own enrollment record.
  *   - auth.uid: 'user123'
  *   - resource.data.userId: 'user123'
  * @deny (create) - User with ID 'user456' attempts to create an enrollment record for 'user123'.
  *   - auth.uid: 'user456'
  *   - request.resource.data.userId: 'user123'
  * @deny (update, delete) - User with ID 'user456' attempts to modify/delete 'user123's enrollment record.
  *   - auth.uid: 'user456'
  *   - resource.data.userId: 'user123'
  * @principle Enforces document ownership for writes.
  */
  match /users/{userId}/enrollments/{enrollmentId} {
  function isOwner(userId) {
  return request.auth != null && request.auth.uid == userId;
  }
 

  function isExistingOwner(userId) {
  return isOwner(userId) && resource != null;
  }
 

  allow get: if isOwner(userId);
  allow list: if isOwner(userId);
  allow create: if isOwner(userId) && request.resource.data.userId == request.auth.uid;
  allow update: if isExistingOwner(userId) && request.resource.data.userId == request.auth.uid;
  allow delete: if isExistingOwner(userId);
  }
 

  /**
  * @description Controls access to quiz attempts for a user.
  * @path /users/{userId}/quizAttempts/{quizAttemptId}
  * @allow (create) - User with ID 'user123' creates their own quiz attempt record.
  *   - auth.uid: 'user123'
  *   - request.resource.data.userId: 'user123'
  * @allow (get, update, delete) - User with ID 'user123' reads/modifies their own quiz attempt record.
  *   - auth.uid: 'user123'
  *   - resource.data.userId: 'user123'
  * @deny (create) - User with ID 'user456' attempts to create a quiz attempt record for 'user123'.
  *   - auth.uid: 'user456'
  *   - request.resource.data.userId: 'user123'
  * @deny (update, delete) - User with ID 'user456' attempts to modify/delete 'user123's quiz attempt record.
  *   - auth.uid: 'user456'
  *   - resource.data.userId: 'user123'
  * @principle Enforces document ownership for writes.
  */
  match /users/{userId}/quizAttempts/{quizAttemptId} {
  function isOwner(userId) {
  return request.auth != null && request.auth.uid == userId;
  }
 

  function isExistingOwner(userId) {
  return isOwner(userId) && resource != null;
  }
 

  allow get: if isOwner(userId);
  allow list: if isOwner(userId);
  allow create: if isOwner(userId) && request.resource.data.userId == request.auth.uid;
  allow update: if isExistingOwner(userId) && request.resource.data.userId == request.auth.uid;
  allow delete: if isExistingOwner(userId);
  }
 

  /**
  * @description Controls access to performance data for a user.
  * @path /users/{userId}/performances/{performanceId}
  * @allow (create) - User with ID 'user123' creates their own performance data record.
  *   - auth.uid: 'user123'
  *   - request.resource.data.userId: 'user123'
  * @allow (get, update, delete) - User with ID 'user123' reads/modifies their own performance data record.
  *   - auth.uid: 'user123'
  *   - resource.data.userId: 'user123'
  * @deny (create) - User with ID 'user456' attempts to create a performance data record for 'user123'.
  *   - auth.uid: 'user456'
  *   - request.resource.data.userId: 'user123'
  * @deny (update, delete) - User with ID 'user456' attempts to modify/delete 'user123's performance data record.
  *   - auth.uid: 'user456'
  *   - resource.data.userId: 'user123'
  * @principle Enforces document ownership for writes.
  */
  match /users/{userId}/performances/{performanceId} {
  function isOwner(userId) {
  return request.auth != null && request.auth.uid == userId;
  }
 

  function isExistingOwner(userId) {
  return isOwner(userId) && resource != null;
  }
 

  allow get: if isOwner(userId);
  allow list: if isOwner(userId);
  allow create: if isOwner(userId) && request.resource.data.userId == request.auth.uid;
  allow update: if isExistingOwner(userId) && request.resource.data.userId == request.auth.uid;
  allow delete: if isExistingOwner(userId);
  }
 

  /**
  * @description Controls access to badges earned by a user.
  * @path /users/{userId}/userBadges/{userBadgeId}
  * @allow (create) - User with ID 'user123' creates their own user badge record.
  *   - auth.uid: 'user123'
  *   - request.resource.data.userId: 'user123'
  * @allow (get, update, delete) - User with ID 'user123' reads/modifies their own user badge record.
  *   - auth.uid: 'user123'
  *   - resource.data.userId: 'user123'
  * @deny (create) - User with ID 'user456' attempts to create a user badge record for 'user123'.
  *   - auth.uid: 'user456'
  *   - request.resource.data.userId: 'user123'
  * @deny (update, delete) - User with ID 'user456' attempts to modify/delete 'user123's user badge record.
  *   - auth.uid: 'user456'
  *   - resource.data.userId: 'user123'
  * @principle Enforces document ownership for writes.
  */
  match /users/{userId}/userBadges/{userBadgeId} {
  function isOwner(userId) {
  return request.auth != null && request.auth.uid == userId;
  }
 

  function isExistingOwner(userId) {
  return isOwner(userId) && resource != null;
  }
 

  allow get: if isOwner(userId);
  allow list: if isOwner(userId);
  allow create: if isOwner(userId) && request.resource.data.userId == request.auth.uid;
  allow update: if isExistingOwner(userId) && request.resource.data.userId == request.auth.uid;
  allow delete: if isExistingOwner(userId);
  }
 

  /**
  * @description Controls access to information about available badges.
  * @path /badges/{badgeId}
  * @allow (get, list) - Any user can view the available badges.
  * @principle Allows public read access while restricting write access.
  */
  match /badges/{badgeId} {
  allow get: if true;
  allow list: if true;
  allow create: if false; // TODO: Add admin role validation for badge creation
  allow update: if false; // TODO: Add admin role validation for badge updates
  allow delete: if false; // TODO: Add admin role validation for badge deletion
  }
  }
 }