/**
 * @fileoverview Firestore Security Rules for the IntLearn application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for personal data and an admin-ownership model for course content.
 * Authorization independence is achieved by denormalizing the adminId into subcollections of courses.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information.
 * - /courses/{courseId}: Stores course information.
 * - /courses/{courseId}/topics/{topicId}: Stores topics for a specific course.
 * - /courses/{courseId}/topics/{topicId}/flashcards/{flashcardId}: Stores flashcards for a specific topic.
 * - /courses/{courseId}/topics/{topicId}/questions/{questionId}: Stores questions for a specific topic.
 * - /courses/{courseId}/topics/{topicId}/quizzes/{quizId}: Stores quizzes for a specific topic.
 * - /users/{userId}/enrollments/{enrollmentId}: Stores enrollment information for a user.
 * - /users/{userId}/quizAttempts/{quizAttemptId}: Stores quiz attempts for a user.
 * - /users/{userId}/performances/{performanceId}: Stores performance data for a user.
 * - /users/{userId}/userBadges/{userBadgeId}: Stores badges earned by a user.
 * - /badges/{badgeId}: Stores information about available badges.
 *
 * Key Security Decisions:
 * - Users can only access their own data under the /users/{userId} path.
 * - Course content can only be created/modified by the admin who created the course.  This ownership is enforced via a denormalized adminId field in subcollections.
 * - Listing all users is disallowed.
 *
 * Denormalization for Authorization:
 * - The 'adminId' from the /courses/{courseId} document is copied into each document within its subcollections (topics, flashcards, questions, quizzes).
 *   This allows rules within the subcollections to quickly verify course ownership without needing to perform additional reads.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user's ID matches the provided userId.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user's ID matches the provided userId and the resource exists.
     */
    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }

    /**
     * @description Allows the owner to create their own user document.
     * @path /users/{userId}
     * @allow (create) - User with UID 'user123' creates /users/user123 document.
     * @deny (create) - User with UID 'user123' creates /users/otherUser document.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      allow get: if false;
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows access to course information, owned by the adminId.
     * @path /courses/{courseId}
     * @allow (get, list) Anyone can read the course, only the owner can modify.
     * @deny (update) - User who is not the owner tries to update the course.
     * @principle Enforces document ownership for writes.
     */
    match /courses/{courseId} {
      allow get, list: if true;
      allow create: if isSignedIn(); // TODO: Add role-based creation or other access control
      allow update: if isSignedIn() && resource.data.adminId == request.auth.uid;
      allow delete: if isSignedIn() && resource.data.adminId == request.auth.uid && resource != null;
    }

    /**
     * @description Allows access to topics for a specific course. Includes denormalized 'adminId' from the parent course for authorization independence.
     * @path /courses/{courseId}/topics/{topicId}
     * @allow (get, list) Anyone can read topics for the course, only the owner can modify.
     * @deny (update) - User who is not the owner tries to update the topic.
     * @principle Enforces document ownership for writes.
     */
    match /courses/{courseId}/topics/{topicId} {
      allow get, list: if true;
      allow create: if isSignedIn() && get(/databases/$(database)/documents/courses/$(courseId)).data.adminId == request.auth.uid;
      allow update: if isSignedIn() && resource.data.adminId == request.auth.uid && resource != null;
      allow delete: if isSignedIn() && resource.data.adminId == request.auth.uid && resource != null;
    }

    /**
     * @description Allows access to flashcards for a specific topic. Includes denormalized 'adminId' from the parent course for authorization independence.
     * @path /courses/{courseId}/topics/{topicId}/flashcards/{flashcardId}
     * @allow (get, list) Anyone can read flashcards for the topic, only the owner can modify.
     * @deny (update) - User who is not the owner tries to update the flashcard.
     * @principle Enforces document ownership for writes.
     */
    match /courses/{courseId}/topics/{topicId}/flashcards/{flashcardId} {
      allow get, list: if true;
      allow create: if isSignedIn() && get(/databases/$(database)/documents/courses/$(courseId)).data.adminId == request.auth.uid;
      allow update: if isSignedIn() && resource.data.adminId == request.auth.uid && resource != null;
      allow delete: if isSignedIn() && resource.data.adminId == request.auth.uid && resource != null;
    }

    /**
     * @description Allows access to questions for a specific topic. Includes denormalized 'adminId' from the parent course for authorization independence.
     * @path /courses/{courseId}/topics/{topicId}/questions/{questionId}
     * @allow (get, list) Anyone can read questions for the topic, only the owner can modify.
     * @deny (update) - User who is not the owner tries to update the question.
     * @principle Enforces document ownership for writes.
     */
    match /courses/{courseId}/topics/{topicId}/questions/{questionId} {
      allow get, list: if true;
      allow create: if isSignedIn() && get(/databases/$(database)/documents/courses/$(courseId)).data.adminId == request.auth.uid;
      allow update: if isSignedIn() && resource.data.adminId == request.auth.uid && resource != null;
      allow delete: if isSignedIn() && resource.data.adminId == request.auth.uid && resource != null;
    }

    /**
     * @description Allows access to quizzes for a specific topic. Includes denormalized 'adminId' from the parent course for authorization independence.
     * @path /courses/{courseId}/topics/{topicId}/quizzes/{quizId}
     * @allow (get, list) Anyone can read quizzes for the topic, only the owner can modify.
     * @deny (update) - User who is not the owner tries to update the quiz.
     * @principle Enforces document ownership for writes.
     */
    match /courses/{courseId}/topics/{topicId}/quizzes/{quizId} {
      allow get, list: if true;
      allow create: if isSignedIn() && get(/databases/$(database)/documents/courses/$(courseId)).data.adminId == request.auth.uid;
      allow update: if isSignedIn() && resource.data.adminId == request.auth.uid && resource != null;
      allow delete: if isSignedIn() && resource.data.adminId == request.auth.uid && resource != null;
    }

    /**
     * @description Allows access to enrollment information for a user. Path-based ownership ensures only the user can access their enrollments.
     * @path /users/{userId}/enrollments/{enrollmentId}
     * @allow (get, list) The user can read their own enrollments.
     * @deny (create, update, delete) Another user attempts to modify this enrollment.
     * @principle Enforces document ownership for reads and writes.
     */
    match /users/{userId}/enrollments/{enrollmentId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows access to quiz attempts for a user. Path-based ownership ensures only the user can access their quiz attempts.
     * @path /users/{userId}/quizAttempts/{quizAttemptId}
     * @allow (get, list) The user can read their own quiz attempts.
     * @deny (create, update, delete) Another user attempts to modify this quiz attempt.
     * @principle Enforces document ownership for reads and writes.
     */
    match /users/{userId}/quizAttempts/{quizAttemptId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows access to performance data for a user. Path-based ownership ensures only the user can access their performance data.
     * @path /users/{userId}/performances/{performanceId}
     * @allow (get, list) The user can read their own performance data.
     * @deny (create, update, delete) Another user attempts to modify this performance data.
     * @principle Enforces document ownership for reads and writes.
     */
    match /users/{userId}/performances/{performanceId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows access to badges earned by a user. Path-based ownership ensures only the user can access their badges.
     * @path /users/{userId}/userBadges/{userBadgeId}
     * @allow (get, list) The user can read their own badges.
     * @deny (create, update, delete) Another user attempts to modify this badge.
     * @principle Enforces document ownership for reads and writes.
     */
    match /users/{userId}/userBadges/{userBadgeId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows access to information about available badges.
     * @path /badges/{badgeId}
     * @allow (get, list) Anyone can read badge information.
     * @deny (create, update, delete) Only admins should be able to modify badge data.  Placeholder rule for now.
     * @principle Open reads, restricted writes.
     */
    match /badges/{badgeId} {
      allow get, list: if true;
      allow create: if false; // TODO: Restrict to admins
      allow update: if false; // TODO: Restrict to admins
      allow delete: if false; // TODO: Restrict to admins
    }

   /**
     * @description Allows access to flashcardMastery for a user. Path-based ownership ensures only the user can access their flashcardMastery.
     * @path /users/{userId}/flashcardMastery
     * @allow (list) The user can read their own flashcardMastery.
     * @deny (create, update, delete) Another user attempts to modify this flashcardMastery.
     * @principle Enforces document ownership for reads and writes.
     */
    match /users/{userId}/flashcardMastery {
      allow get: if false;
      allow list: if isOwner(userId);
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
  }
}