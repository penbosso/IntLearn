/**
 * @fileoverview Firestore Security Rules for the IntLearn platform.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user-specific data
 * and an admin-ownership model for course content.  It prioritizes
 * authorization independence via data denormalization.
 *
 * Data Structure:
 * - /users/{userId}: User profiles. Access is restricted to the user themselves.
 * - /courses/{courseId}: Course data. Access is restricted to the course admin (creator).
 * - /courses/{courseId}/topics/{topicId}: Topics within a course.  Admin access is
 *   enforced via the denormalized adminId field.
 * - /courses/{courseId}/topics/{topicId}/flashcards/{flashcardId}, /questions/{questionId}, /quizzes/{quizId}:
 *   Content nested under topics, also secured via the denormalized adminId.
 * - /users/{userId}/enrollments/{enrollmentId}, /quizAttempts/{quizAttemptId},
 *   /performances/{performanceId}, /userBadges/{userBadgeId}: User-specific
 *   data, accessible only by the user.
 * - /badges/{badgeId}: Publicly readable badge metadata.
 *
 * Key Security Decisions:
 * - Users can only access their own data under the /users/{userId} tree.
 * - Course content can only be created, updated, or deleted by the course admin.
 * - Listing of user documents is disallowed to protect user privacy.
 * - The rules do not enforce strict schema validation in this prototyping phase.
 *
 * Denormalization for Authorization:
 * - The 'adminId' field from the /courses/{courseId} document is copied into
 *   documents in the subcollections (topics, flashcards, questions, quizzes) to
 *   enable authorization checks without requiring additional 'get()' operations.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     * @return {bool} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user is the owner of the resource.
     * @param {string} userId The user ID to compare against the request's auth UID.
     * @return {bool} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is the existing owner of the resource (for updates and deletes).
     * @param {string} userId The user ID to compare against.
     * @return {bool} True if the user is the owner and the document exists.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Matches the /users/{userId} document.
     * @path /users/{userId}
     * @allow (create) User '6psM4D9vcARUuukN95TWgjI2ktp1' can create their own profile.
     * @allow (get) User '6psM4D9vcARUuukN95TWgjI2ktp1' can read their own profile.
     * @allow (update) User '6psM4D9vcARUuukN95TWgjI2ktp1' can update their own profile.
     * @allow (delete) User '6psM4D9vcARUuukN95TWgjI2ktp1' can delete their own profile.
     * @deny (create) User 'otherUserId' cannot create a profile for '6psM4D9vcARUuukN95TWgjI2ktp1'.
     * @deny (get) User 'otherUserId' cannot read '6psM4D9vcARUuukN95TWgjI2ktp1' profile.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      // Disallow listing users for privacy.
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Matches the /courses/{courseId} document.
     * @path /courses/{courseId}
     */
    match /courses/{courseId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if false; // TODO: Add admin validation once the schema is updated with an ownership field.
      allow delete: if false; // TODO: Add admin validation once the schema is updated with an ownership field.
    }

    /**
     * @description Matches the /courses/{courseId}/topics/{topicId} document.
     * @path /courses/{courseId}/topics/{topicId}
     */
    match /courses/{courseId}/topics/{topicId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if false; // TODO: Add admin validation once the schema is updated with an ownership field.
      allow delete: if false; // TODO: Add admin validation once the schema is updated with an ownership field.
    }

    /**
     * @description Matches the /courses/{courseId}/topics/{topicId}/flashcards/{flashcardId} document.
     * @path /courses/{courseId}/topics/{topicId}/flashcards/{flashcardId}
     */
    match /courses/{courseId}/topics/{topicId}/flashcards/{flashcardId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if false; // TODO: Add admin validation once the schema is updated with an ownership field.
      allow delete: if false; // TODO: Add admin validation once the schema is updated with an ownership field.
    }

    /**
     * @description Matches the /courses/{courseId}/topics/{topicId}/questions/{questionId} document.
     * @path /courses/{courseId}/topics/{topicId}/questions/{questionId}
     */
    match /courses/{courseId}/topics/{topicId}/questions/{questionId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if false; // TODO: Add admin validation once the schema is updated with an ownership field.
      allow delete: if false; // TODO: Add admin validation once the schema is updated with an ownership field.
    }

    /**
     * @description Matches the /courses/{courseId}/topics/{topicId}/quizzes/{quizId} document.
     * @path /courses/{courseId}/topics/{topicId}/quizzes/{quizId}
     */
    match /courses/{courseId}/topics/{topicId}/quizzes/{quizId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if false; // TODO: Add admin validation once the schema is updated with an ownership field.
      allow delete: if false; // TODO: Add admin validation once the schema is updated with an ownership field.
    }

    /**
     * @description Matches the /users/{userId}/enrollments/{enrollmentId} document.
     * @path /users/{userId}/enrollments/{enrollmentId}
     * @allow (create) User '6psM4D9vcARUuukN95TWgjI2ktp1' can create their own enrollment.
     * @allow (get) User '6psM4D9vcARUuukN95TWgjI2ktp1' can read their own enrollment.
     * @allow (update) User '6psM4D9vcARUuukN95TWgjI2ktp1' can update their own enrollment.
     * @allow (delete) User '6psM4D9vcARUuukN95TWgjI2ktp1' can delete their own enrollment.
     * @deny (create) User 'otherUserId' cannot create an enrollment for '6psM4D9vcARUuukN95TWgjI2ktp1'.
     * @deny (get) User 'otherUserId' cannot read '6psM4D9vcARUuukN95TWgjI2ktp1' enrollment.
     * @principle Enforces document ownership for enrollments.
     */
    match /users/{userId}/enrollments/{enrollmentId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Matches the /users/{userId}/quizAttempts/{quizAttemptId} document.
     * @path /users/{userId}/quizAttempts/{quizAttemptId}
     * @allow (create) User '6psM4D9vcARUuukN95TWgjI2ktp1' can create their own quiz attempt.
     * @allow (get) User '6psM4D9vcARUuukN95TWgjI2ktp1' can read their own quiz attempt.
     * @allow (update) User '6psM4D9vcARUuukN95TWgjI2ktp1' can update their own quiz attempt.
     * @allow (delete) User '6psM4D9vcARUuukN95TWgjI2ktp1' can delete their own quiz attempt.
     * @deny (create) User 'otherUserId' cannot create a quiz attempt for '6psM4D9vcARUuukN95TWgjI2ktp1'.
     * @deny (get) User 'otherUserId' cannot read '6psM4D9vcARUuukN95TWgjI2ktp1' quiz attempt.
     * @principle Enforces document ownership for quiz attempts.
     */
    match /users/{userId}/quizAttempts/{quizAttemptId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Matches the /users/{userId}/performances/{performanceId} document.
     * @path /users/{userId}/performances/{performanceId}
     * @allow (create) User '6psM4D9vcARUuukN95TWgjI2ktp1' can create their own performance data.
     * @allow (get) User '6psM4D9vcARUuukN95TWgjI2ktp1' can read their own performance data.
     * @allow (update) User '6psM4D9vcARUuukN95TWgjI2ktp1' can update their own performance data.
     * @allow (delete) User '6psM4D9vcARUuukN95TWgjI2ktp1' can delete their own performance data.
     * @deny (create) User 'otherUserId' cannot create performance data for '6psM4D9vcARUuukN95TWgjI2ktp1'.
     * @deny (get) User 'otherUserId' cannot read '6psM4D9vcARUuukN95TWgjI2ktp1' performance data.
     * @principle Enforces document ownership for performance data.
     */
    match /users/{userId}/performances/{performanceId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Matches the /users/{userId}/userBadges/{userBadgeId} document.
     * @path /users/{userId}/userBadges/{userBadgeId}
     * @allow (create) User '6psM4D9vcARUuukN95TWgjI2ktp1' can create their own user badge.
     * @allow (get) User '6psM4D9vcARUuukN95TWgjI2ktp1' can read their own user badge.
     * @allow (update) User '6psM4D9vcARUuukN95TWgjI2ktp1' can update their own user badge.
     * @allow (delete) User '6psM4D9vcARUuukN95TWgjI2ktp1' can delete their own user badge.
     * @deny (create) User 'otherUserId' cannot create a user badge for '6psM4D9vcARUuukN95TWgjI2ktp1'.
     * @deny (get) User 'otherUserId' cannot read '6psM4D9vcARUuukN95TWgjI2ktp1' user badge.
     * @principle Enforces document ownership for user badges.
     */
    match /users/{userId}/userBadges/{userBadgeId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Matches the /badges/{badgeId} document.
     * @path /badges/{badgeId}
     * @allow (get) Any user can read badge information.
     * @allow (list) Any user can list badges.
     * @principle Allows public read access to badge metadata.
     */
    match /badges/{badgeId} {
      allow get: if true;
      allow list: if true;
      allow create: if false; // TODO: Add admin validation once the schema is updated with an ownership field.
      allow update: if false; // TODO: Add admin validation once the schema is updated with an ownership field.
      allow delete: if false; // TODO: Add admin validation once the schema is updated with an ownership field.
    }

    /**
     * @description Matches the /users/{userId}/flashcardMastery document.
     * @path /users/{userId}/flashcardMastery
     * @allow (list) User '6psM4D9vcARUuukN95TWgjI2ktp1' can list their own flashcardMastery.
     * @deny (get) User 'otherUserId' cannot read '6psM4D9vcARUuukN95TWgjI2ktp1' flashcardMastery.
     * @principle Enforces document ownership for flashcardMastery.
     */
     match /users/{userId}/flashcardMastery/{flashcardMasteryId} {
        allow get: if isOwner(userId);
        allow list: if isOwner(userId);
        allow create: if isOwner(userId);
        allow update: if isExistingOwner(userId);
        allow delete: if isExistingOwner(userId);
    }
  }
}